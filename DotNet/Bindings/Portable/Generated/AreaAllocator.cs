// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// AreaAllocator.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho
{
	/// <summary>
	/// Rectangular area allocator.
	/// </summary>
	public unsafe partial class AreaAllocator
	{
		private IntPtr handle;

		public IntPtr Handle {
			get {
				return handle;
			}
		}

		unsafe partial void OnAreaAllocatorCreated ();

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr AreaAllocator_AreaAllocator ();

		[Preserve]
		public AreaAllocator ()
		{
			Runtime.Validate (typeof(AreaAllocator));
			handle = AreaAllocator_AreaAllocator ();
			OnAreaAllocatorCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr AreaAllocator_AreaAllocator0 (int width, int height, bool fastMode);

		[Preserve]
		public AreaAllocator (int width, int height, bool fastMode = true)
		{
			Runtime.Validate (typeof(AreaAllocator));
			handle = AreaAllocator_AreaAllocator0 (width, height, fastMode);
			OnAreaAllocatorCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr AreaAllocator_AreaAllocator1 (int width, int height, int maxWidth, int maxHeight, bool fastMode);

		[Preserve]
		public AreaAllocator (int width, int height, int maxWidth, int maxHeight, bool fastMode = true)
		{
			Runtime.Validate (typeof(AreaAllocator));
			handle = AreaAllocator_AreaAllocator1 (width, height, maxWidth, maxHeight, fastMode);
			OnAreaAllocatorCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void AreaAllocator_Reset (IntPtr handle, int width, int height, int maxWidth, int maxHeight, bool fastMode);

		/// <summary>
		/// Reset to given width and height and remove all previous allocations.
		/// </summary>
		public void Reset (int width, int height, int maxWidth = 0, int maxHeight = 0, bool fastMode = true)
		{
			Runtime.ValidateObject (this);
			AreaAllocator_Reset (handle, width, height, maxWidth, maxHeight, fastMode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool AreaAllocator_Allocate (IntPtr handle, int width, int height, ref int x, ref int y);

		/// <summary>
		/// Try to allocate an area. Return true if successful, with x
		/// &
		/// y coordinates filled.
		/// </summary>
		public bool Allocate (int width, int height, ref int x, ref int y)
		{
			Runtime.ValidateObject (this);
			return AreaAllocator_Allocate (handle, width, height, ref x, ref y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int AreaAllocator_GetWidth (IntPtr handle);

		/// <summary>
		/// Return the current width.
		/// </summary>
		private int GetWidth ()
		{
			Runtime.ValidateObject (this);
			return AreaAllocator_GetWidth (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int AreaAllocator_GetHeight (IntPtr handle);

		/// <summary>
		/// Return the current height.
		/// </summary>
		private int GetHeight ()
		{
			Runtime.ValidateObject (this);
			return AreaAllocator_GetHeight (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool AreaAllocator_GetFastMode (IntPtr handle);

		/// <summary>
		/// Return whether uses fast mode. Fast mode uses a simpler allocation scheme which may waste free space, but is OK for eg. fonts.
		/// </summary>
		private bool GetFastMode ()
		{
			Runtime.ValidateObject (this);
			return AreaAllocator_GetFastMode (handle);
		}

		/// <summary>
		/// Return the current width.
		/// </summary>
		public int Width {
			get {
				return GetWidth ();
			}
		}

		/// <summary>
		/// Return the current height.
		/// </summary>
		public int Height {
			get {
				return GetHeight ();
			}
		}

		/// <summary>
		/// Return whether uses fast mode. Fast mode uses a simpler allocation scheme which may waste free space, but is OK for eg. fonts.
		/// </summary>
		public bool FastMode {
			get {
				return GetFastMode ();
			}
		}
	}
}
