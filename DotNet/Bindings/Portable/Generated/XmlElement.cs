// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// XmlElement.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;

namespace Urho.Resources
{
	/// <summary>
	/// Element in an XML file.
	/// </summary>
	public unsafe partial class XmlElement
	{
		unsafe partial void OnXmlElementCreated ();

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_XMLElement ();

		[Preserve]
		public XmlElement ()
		{
			Runtime.Validate (typeof(XmlElement));
			handle = XmlElement_XMLElement ();
			OnXmlElementCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_XMLElement0 (IntPtr rhs);

		[Preserve]
		public XmlElement (XmlElement rhs)
		{
			Runtime.Validate (typeof(XmlElement));
			handle = XmlElement_XMLElement0 ((object)rhs == null ? IntPtr.Zero : rhs.Handle);
			OnXmlElementCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_CreateChild (IntPtr handle, string name);

		/// <summary>
		/// Create a child element.
		/// </summary>
		public XmlElement CreateChild (string name)
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_CreateChild (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetOrCreateChild (IntPtr handle, string name);

		/// <summary>
		/// Return the first child element with name or create if does not exist.
		/// </summary>
		public XmlElement GetOrCreateChild (string name)
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_GetOrCreateChild (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_AppendChild (IntPtr handle, IntPtr element, bool asCopy);

		/// <summary>
		/// Append element. If asCopy is set to true then original element is copied and appended, otherwise specified element is appended.
		/// </summary>
		public bool AppendChild (XmlElement element, bool asCopy = false)
		{
			Runtime.ValidateObject (this);
			return XmlElement_AppendChild (handle, (object)element == null ? IntPtr.Zero : element.Handle, asCopy);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_Remove (IntPtr handle);

		/// <summary>
		/// Remove element from its parent.
		/// </summary>
		public bool Remove ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_Remove (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChild (IntPtr handle, IntPtr element);

		/// <summary>
		/// Remove a child element. Return true if successful.
		/// </summary>
		public bool RemoveChild (XmlElement element)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChild (handle, (object)element == null ? IntPtr.Zero : element.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChild1 (IntPtr handle, string name);

		/// <summary>
		/// Remove a child element by name. Return true if successful.
		/// </summary>
		public bool RemoveChild (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChild1 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveChildren (IntPtr handle, string name);

		/// <summary>
		/// Remove child elements of certain name, or all child elements if name is empty. Return true if successful.
		/// </summary>
		public bool RemoveChildren (string name = "")
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveChildren (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_RemoveAttribute (IntPtr handle, string name);

		/// <summary>
		/// Remove an attribute by name. Return true if successful.
		/// </summary>
		public bool RemoveAttribute (string name = "")
		{
			Runtime.ValidateObject (this);
			return XmlElement_RemoveAttribute (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetValue (IntPtr handle, string value);

		/// <summary>
		/// Set the value for an inner node in the following format
		/// <node
		/// >value
		/// </node
		/// >.
		/// 
		/// </summary>
		public bool SetValue (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetValue (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetAttribute (IntPtr handle, string name, string value);

		/// <summary>
		/// Set an attribute.
		/// </summary>
		public bool SetAttribute (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetAttribute (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetAttribute2 (IntPtr handle, string value);

		/// <summary>
		/// Set an attribute. Only valid if it is an attribute only XPath query result.
		/// </summary>
		public bool SetAttribute (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetAttribute2 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBool (IntPtr handle, string name, bool value);

		/// <summary>
		/// Set a bool attribute.
		/// </summary>
		public bool SetBool (string name, bool value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBool (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBoundingBox (IntPtr handle, ref Urho.BoundingBox value);

		/// <summary>
		/// Set a BoundingBox attribute.
		/// </summary>
		public bool SetBoundingBox (Urho.BoundingBox value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBoundingBox (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBoundingBox3 (IntPtr handle, string name, ref Urho.BoundingBox value);

		/// <summary>
		/// Set a BoundingBox attribute.
		/// </summary>
		public bool SetBoundingBox (string name, Urho.BoundingBox value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBoundingBox3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetBuffer (IntPtr handle, string name, void* data, uint size);

		/// <summary>
		/// Set a buffer attribute.
		/// </summary>
		public bool SetBuffer (string name, void* data, uint size)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetBuffer (handle, name, data, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetColor (IntPtr handle, string name, ref Urho.Color value);

		/// <summary>
		/// Set a color attribute.
		/// </summary>
		public bool SetColor (string name, Urho.Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetColor (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetFloat (IntPtr handle, string name, float value);

		/// <summary>
		/// Set a float attribute.
		/// </summary>
		public bool SetFloat (string name, float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetFloat (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetDouble (IntPtr handle, string name, double value);

		/// <summary>
		/// Set a double attribute.
		/// </summary>
		public bool SetDouble (string name, double value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetDouble (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetUInt (IntPtr handle, string name, uint value);

		/// <summary>
		/// Set an unsigned integer attribute.
		/// </summary>
		public bool SetUInt (string name, uint value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetUInt (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetInt (IntPtr handle, string name, int value);

		/// <summary>
		/// Set an integer attribute.
		/// </summary>
		public bool SetInt (string name, int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetInt (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetUInt64 (IntPtr handle, string name, ulong value);

		/// <summary>
		/// Set an unsigned long long integer attribute.
		/// </summary>
		public bool SetUInt64 (string name, ulong value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetUInt64 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetInt64 (IntPtr handle, string name, long value);

		/// <summary>
		/// Set a long long integer attribute.
		/// </summary>
		public bool SetInt64 (string name, long value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetInt64 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetIntRect (IntPtr handle, string name, ref Urho.IntRect value);

		/// <summary>
		/// Set an IntRect attribute.
		/// </summary>
		public bool SetIntRect (string name, Urho.IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetIntRect (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetIntVector2 (IntPtr handle, string name, ref Urho.IntVector2 value);

		/// <summary>
		/// Set an IntVector2 attribute.
		/// </summary>
		public bool SetIntVector2 (string name, Urho.IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetIntVector2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetQuaternion (IntPtr handle, string name, ref Urho.Quaternion value);

		/// <summary>
		/// Set a quaternion attribute.
		/// </summary>
		public bool SetQuaternion (string name, Urho.Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetQuaternion (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetString (IntPtr handle, string name, string value);

		/// <summary>
		/// Set a string attribute.
		/// </summary>
		public bool SetString (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetString (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_0 (IntPtr handle, ref Vector3 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_0 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_1 (IntPtr handle, ref IntRect value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_1 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_2 (IntPtr handle, ref Color value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_2 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_3 (IntPtr handle, ref Vector2 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_3 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_4 (IntPtr handle, ref Vector4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_4 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_5 (IntPtr handle, ref IntVector2 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_5 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_6 (IntPtr handle, ref Quaternion value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_6 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_7 (IntPtr handle, ref Matrix4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_7 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_8 (IntPtr handle, ref Matrix3 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Matrix3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_8 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_9 (IntPtr handle, ref Matrix3x4 value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_9 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_10 (IntPtr handle, int value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_10 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_11 (IntPtr handle, uint value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (uint value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_11 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_12 (IntPtr handle, float value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_12 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_13 (IntPtr handle, string value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_13 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariant_14 (IntPtr handle, bool value);

		/// <summary>
		/// Set a variant attribute.
		/// </summary>
		public bool SetVariant (bool value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariant_14 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_0 (IntPtr handle, ref Vector3 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_0 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_1 (IntPtr handle, ref IntRect value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_1 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_2 (IntPtr handle, ref Color value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_2 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_3 (IntPtr handle, ref Vector2 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_3 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_4 (IntPtr handle, ref Vector4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_4 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_5 (IntPtr handle, ref IntVector2 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_5 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_6 (IntPtr handle, ref Quaternion value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_6 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_7 (IntPtr handle, ref Matrix4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_7 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_8 (IntPtr handle, ref Matrix3 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Matrix3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_8 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_9 (IntPtr handle, ref Matrix3x4 value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_9 (handle, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_10 (IntPtr handle, int value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_10 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_11 (IntPtr handle, uint value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (uint value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_11 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_12 (IntPtr handle, float value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_12 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_13 (IntPtr handle, string value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_13 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVariantValue_14 (IntPtr handle, bool value);

		/// <summary>
		/// Set a variant attribute excluding the type.
		/// </summary>
		public bool SetVariantValue (bool value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVariantValue_14 (handle, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector2 (IntPtr handle, string name, ref Urho.Vector2 value);

		/// <summary>
		/// Set a Vector2 attribute.
		/// </summary>
		public bool SetVector2 (string name, Urho.Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector3 (IntPtr handle, string name, ref Urho.Vector3 value);

		/// <summary>
		/// Set a Vector3 attribute.
		/// </summary>
		public bool SetVector3 (string name, Urho.Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVector4 (IntPtr handle, string name, ref Urho.Vector4 value);

		/// <summary>
		/// Set a Vector4 attribute.
		/// </summary>
		public bool SetVector4 (string name, Urho.Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVector4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_0 (IntPtr handle, string name, ref Vector3 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_0 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_1 (IntPtr handle, string name, ref IntRect value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, IntRect value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_1 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_2 (IntPtr handle, string name, ref Color value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Color value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_2 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_3 (IntPtr handle, string name, ref Vector2 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_4 (IntPtr handle, string name, ref Vector4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Vector4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_5 (IntPtr handle, string name, ref IntVector2 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, IntVector2 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_5 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_6 (IntPtr handle, string name, ref Quaternion value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Quaternion value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_6 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_7 (IntPtr handle, string name, ref Matrix4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_7 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_8 (IntPtr handle, string name, ref Matrix3 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Matrix3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_8 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_9 (IntPtr handle, string name, ref Matrix3x4 value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_9 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_10 (IntPtr handle, string name, int value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, int value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_10 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_11 (IntPtr handle, string name, uint value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, uint value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_11 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_12 (IntPtr handle, string name, float value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, float value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_12 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_13 (IntPtr handle, string name, string value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, string value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_13 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetVectorVariant_14 (IntPtr handle, string name, bool value);

		/// <summary>
		/// Set a float, Vector or Matrix attribute stored in a variant.
		/// </summary>
		public bool SetVectorVariant (string name, bool value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetVectorVariant_14 (handle, name, value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetMatrix3 (IntPtr handle, string name, ref Urho.Matrix3 value);

		/// <summary>
		/// Set a Matrix3 attribute.
		/// </summary>
		public bool SetMatrix3 (string name, Urho.Matrix3 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetMatrix3 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetMatrix3x4 (IntPtr handle, string name, ref Urho.Matrix3x4 value);

		/// <summary>
		/// Set a Matrix3x4 attribute.
		/// </summary>
		public bool SetMatrix3x4 (string name, Urho.Matrix3x4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetMatrix3x4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_SetMatrix4 (IntPtr handle, string name, ref Urho.Matrix4 value);

		/// <summary>
		/// Set a Matrix4 attribute.
		/// </summary>
		public bool SetMatrix4 (string name, Urho.Matrix4 value)
		{
			Runtime.ValidateObject (this);
			return XmlElement_SetMatrix4 (handle, name, ref value);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_IsNull (IntPtr handle);

		/// <summary>
		/// Return whether does not refer to an element or an XPath node.
		/// 
		/// </summary>
		private bool IsNull ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_IsNull (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_NotNull (IntPtr handle);

		/// <summary>
		/// Return whether refers to an element or an XPath node.
		/// 
		/// </summary>
		public bool NotNull ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_NotNull (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetName (IntPtr handle);

		/// <summary>
		/// Return element name (or attribute name if it is an attribute only XPath query result).
		/// 
		/// </summary>
		private string GetName ()
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_HasChild (IntPtr handle, string name);

		/// <summary>
		/// Return whether has a child element.
		/// </summary>
		public bool HasChild (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_HasChild (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetChild (IntPtr handle, string name);

		/// <summary>
		/// Return child element, or null if missing.
		/// </summary>
		public XmlElement GetChild (string name = "")
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_GetChild (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetNext (IntPtr handle, string name);

		/// <summary>
		/// Return next sibling element.
		/// </summary>
		public XmlElement GetNext (string name = "")
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_GetNext (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetParent (IntPtr handle);

		/// <summary>
		/// Return parent element.
		/// 
		/// </summary>
		private XmlElement GetParent ()
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_GetParent (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetNumAttributes (IntPtr handle);

		/// <summary>
		/// Return number of attributes.
		/// 
		/// </summary>
		private uint GetNumAttributes ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetNumAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_HasAttribute (IntPtr handle, string name);

		/// <summary>
		/// Return whether has an attribute.
		/// </summary>
		public bool HasAttribute (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_HasAttribute (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetValue (IntPtr handle);

		/// <summary>
		/// Return inner value, or empty if missing for nodes like
		/// <node
		/// >value
		/// </node
		/// >.
		/// 
		/// </summary>
		private string GetValue ()
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetValue (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttribute (IntPtr handle, string name);

		/// <summary>
		/// Return attribute, or empty if missing.
		/// </summary>
		public string GetAttribute (string name = "")
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttribute (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttributeLower (IntPtr handle, string name);

		/// <summary>
		/// Return attribute in lowercase, or empty if missing.
		/// </summary>
		public string GetAttributeLower (string name)
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttributeLower (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetAttributeUpper (IntPtr handle, string name);

		/// <summary>
		/// Return attribute in lowercase, or empty if missing.
		/// </summary>
		public string GetAttributeUpper (string name)
		{
			Runtime.ValidateObject (this);
			return Marshal.PtrToStringAnsi (XmlElement_GetAttributeUpper (handle, name));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_GetBool (IntPtr handle, string name);

		/// <summary>
		/// Return bool attribute, or false if missing.
		/// </summary>
		public bool GetBool (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetBool (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool XmlElement_GetBuffer (IntPtr handle, string name, IntPtr dest, uint size);

		/// <summary>
		/// Copy buffer attribute into a supplied buffer. Return true if buffer was large enough.
		/// </summary>
		public bool GetBuffer (string name, IntPtr dest, uint size)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetBuffer (handle, name, dest, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
BoundingBox *
#else
BoundingBox
#endif
 XmlElement_GetBoundingBox (IntPtr handle);

		/// <summary>
		/// Return bounding box attribute, or empty if missing.
		/// </summary>
		private BoundingBox GetBoundingBox ()
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetBoundingBox
#else
XmlElement_GetBoundingBox
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
BoundingBox *
#else
BoundingBox
#endif
 XmlElement_GetBoundingBox4 (IntPtr handle, string name);

		/// <summary>
		/// Return bounding box attribute, or empty if missing.
		/// </summary>
		public BoundingBox GetBoundingBox (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetBoundingBox4
#else
XmlElement_GetBoundingBox4
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Color *
#else
Color
#endif
 XmlElement_GetColor (IntPtr handle, string name);

		/// <summary>
		/// Return a color attribute, or default if missing.
		/// </summary>
		public Color GetColor (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetColor
#else
XmlElement_GetColor
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float XmlElement_GetFloat (IntPtr handle, string name);

		/// <summary>
		/// Return a float attribute, or zero if missing.
		/// </summary>
		public float GetFloat (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetFloat (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern double XmlElement_GetDouble (IntPtr handle, string name);

		/// <summary>
		/// Return a double attribute, or zero if missing.
		/// </summary>
		public double GetDouble (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetDouble (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetUInt (IntPtr handle, string name);

		/// <summary>
		/// Return an unsigned integer attribute, or zero if missing.
		/// </summary>
		public uint GetUInt (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetUInt (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int XmlElement_GetInt (IntPtr handle, string name);

		/// <summary>
		/// Return an integer attribute, or zero if missing.
		/// </summary>
		public int GetInt (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetInt (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ulong XmlElement_GetUInt64 (IntPtr handle, string name);

		/// <summary>
		/// Return an unsigned long long integer attribute, or zero if missing.
		/// </summary>
		public ulong GetUInt64 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetUInt64 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern long XmlElement_GetInt64 (IntPtr handle, string name);

		/// <summary>
		/// Return a long long integer attribute, or zero if missing.
		/// </summary>
		public long GetInt64 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetInt64 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
IntRect *
#else
IntRect
#endif
 XmlElement_GetIntRect (IntPtr handle, string name);

		/// <summary>
		/// Return an IntRect attribute, or default if missing.
		/// </summary>
		public IntRect GetIntRect (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetIntRect
#else
XmlElement_GetIntRect
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.IntVector2 *
#else
Urho.IntVector2
#endif
 XmlElement_GetIntVector2 (IntPtr handle, string name);

		/// <summary>
		/// Return an IntVector2 attribute, or default if missing.
		/// </summary>
		public Urho.IntVector2 GetIntVector2 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetIntVector2
#else
XmlElement_GetIntVector2
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntVector3 XmlElement_GetIntVector3 (IntPtr handle, string name);

		/// <summary>
		/// Return an IntVector3 attribute, or default if missing.
		/// </summary>
		public IntVector3 GetIntVector3 (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetIntVector3 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Rect XmlElement_GetRect (IntPtr handle, string name);

		/// <summary>
		/// Return a Rect attribute, or default if missing.
		/// </summary>
		public Rect GetRect (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetRect (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Quaternion *
#else
Quaternion
#endif
 XmlElement_GetQuaternion (IntPtr handle, string name);

		/// <summary>
		/// Return a quaternion attribute, or default if missing.
		/// </summary>
		public Quaternion GetQuaternion (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetQuaternion
#else
XmlElement_GetQuaternion
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVariant (IntPtr handle);

		/// <summary>
		/// Return a variant attribute, or empty if missing.
		/// </summary>
		private Variant GetVariant ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVariant (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVariantValue (IntPtr handle, VariantType type);

		/// <summary>
		/// Return a variant attribute with static type.
		/// </summary>
		public Variant GetVariantValue (VariantType type)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVariantValue (handle, type);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef XmlElement_GetResourceRef (IntPtr handle);

		/// <summary>
		/// Return a resource reference attribute, or empty if missing.
		/// </summary>
		private ResourceRef GetResourceRef ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetResourceRef (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRefList XmlElement_GetResourceRefList (IntPtr handle);

		/// <summary>
		/// Return a resource reference list attribute, or empty if missing.
		/// </summary>
		private ResourceRefList GetResourceRefList ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetResourceRefList (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector2 *
#else
Vector2
#endif
 XmlElement_GetVector2 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector2 attribute, or zero vector if missing.
		/// </summary>
		public Vector2 GetVector2 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetVector2
#else
XmlElement_GetVector2
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 XmlElement_GetVector3 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector3 attribute, or zero vector if missing.
		/// </summary>
		public Vector3 GetVector3 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetVector3
#else
XmlElement_GetVector3
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector4 *
#else
Vector4
#endif
 XmlElement_GetVector4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Vector4 attribute, or zero vector if missing.
		/// </summary>
		public Vector4 GetVector4 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetVector4
#else
XmlElement_GetVector4
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector4 *
#else
Vector4
#endif
 XmlElement_GetVector (IntPtr handle, string name);

		/// <summary>
		/// Return any Vector attribute as Vector4. Missing coordinates will be zero.
		/// </summary>
		public Vector4 GetVector (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetVector
#else
XmlElement_GetVector
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern Variant XmlElement_GetVectorVariant (IntPtr handle, string name);

		/// <summary>
		/// Return a float, Vector or Matrix attribute as Variant.
		/// </summary>
		public Variant GetVectorVariant (string name)
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetVectorVariant (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Matrix3 *
#else
Matrix3
#endif
 XmlElement_GetMatrix3 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix3 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix3 GetMatrix3 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetMatrix3
#else
XmlElement_GetMatrix3
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Matrix3x4 *
#else
Matrix3x4
#endif
 XmlElement_GetMatrix3x4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix3x4 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix3x4 GetMatrix3x4 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetMatrix3x4
#else
XmlElement_GetMatrix3x4
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Matrix4 *
#else
Matrix4
#endif
 XmlElement_GetMatrix4 (IntPtr handle, string name);

		/// <summary>
		/// Return a Matrix4 attribute, or zero matrix if missing.
		/// </summary>
		public Matrix4 GetMatrix4 (string name)
		{
			Runtime.ValidateObject (this);
			return 
#if __WEB__
*XmlElement_GetMatrix4
#else
XmlElement_GetMatrix4
#endif
 (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_GetFile (IntPtr handle);

		/// <summary>
		/// Return XML file.
		/// 
		/// </summary>
		private Urho.Resources.XmlFile GetFile ()
		{
			Runtime.ValidateObject (this);
			return Runtime.LookupObject<Urho.Resources.XmlFile> (XmlElement_GetFile (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern XPathResultSet* XmlElement_GetXPathResultSet (IntPtr handle);

		/// <summary>
		/// Return XPath query result set.
		/// </summary>
		private XPathResultSet* GetXPathResultSet ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetXPathResultSet (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint XmlElement_GetXPathResultIndex (IntPtr handle);

		/// <summary>
		/// Return current result index.
		/// </summary>
		private uint GetXPathResultIndex ()
		{
			Runtime.ValidateObject (this);
			return XmlElement_GetXPathResultIndex (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr XmlElement_NextResult (IntPtr handle);

		/// <summary>
		/// Return next XPath query result. Only valid when this instance of XMLElement is itself one of the query result in the result set.
		/// 
		/// </summary>
		public XmlElement NextResult ()
		{
			Runtime.ValidateObject (this);
			return new XmlElement (XmlElement_NextResult (handle));
		}

		/// <summary>
		/// Return inner value, or empty if missing for nodes like
		/// <node
		/// >value
		/// </node
		/// >.
		/// 
		/// </summary>
		public string Value {
			get {
				return GetValue ();
			}
		}

		/// <summary>
		/// Return bounding box attribute, or empty if missing.
		/// </summary>
		public BoundingBox BoundingBox {
			get {
				return GetBoundingBox ();
			}
		}

		/// <summary>
		/// Return a variant attribute, or empty if missing.
		/// </summary>
		public Variant Variant {
			get {
				return GetVariant ();
			}
		}

		/// <summary>
		/// Return a resource reference attribute, or empty if missing.
		/// </summary>
		public ResourceRef ResourceRef {
			get {
				return GetResourceRef ();
			}
		}

		/// <summary>
		/// Return a resource reference list attribute, or empty if missing.
		/// </summary>
		public ResourceRefList ResourceRefList {
			get {
				return GetResourceRefList ();
			}
		}

		/// <summary>
		/// Return whether does not refer to an element or an XPath node.
		/// 
		/// </summary>
		public bool Null {
			get {
				return IsNull ();
			}
		}

		/// <summary>
		/// Return element name (or attribute name if it is an attribute only XPath query result).
		/// 
		/// </summary>
		public string Name {
			get {
				return GetName ();
			}
		}

		/// <summary>
		/// Return parent element.
		/// 
		/// </summary>
		public XmlElement Parent {
			get {
				return GetParent ();
			}
		}

		/// <summary>
		/// Return number of attributes.
		/// 
		/// </summary>
		public uint NumAttributes {
			get {
				return GetNumAttributes ();
			}
		}

		/// <summary>
		/// Return XML file.
		/// 
		/// </summary>
		public Urho.Resources.XmlFile File {
			get {
				return GetFile ();
			}
		}

		/// <summary>
		/// Return XPath query result set.
		/// </summary>
		public XPathResultSet* XPathResultSet {
			get {
				return GetXPathResultSet ();
			}
		}

		/// <summary>
		/// Return current result index.
		/// </summary>
		public uint XPathResultIndex {
			get {
				return GetXPathResultIndex ();
			}
		}
	}
}
