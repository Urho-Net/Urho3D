// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Database.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;

namespace Urho
{
	/// <summary>
	/// %Database subsystem. Manage database connections.
	/// </summary>
	public unsafe partial class Database : UrhoObject
	{
		unsafe partial void OnDatabaseCreated ();

		[Preserve]
		public Database (IntPtr handle) : base (handle)
		{
			OnDatabaseCreated ();
		}

		[Preserve]
		protected Database (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnDatabaseCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Database_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Database_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Database_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Database_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Database_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Database));
			return new StringHash (Database_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Database_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Database));
			return Marshal.PtrToStringAnsi (Database_GetTypeNameStatic ());
		}

		[Preserve]
		public Database () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Database_Database (IntPtr context);

		[Preserve]
		public Database (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Database));
			handle = Database_Database ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnDatabaseCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern DBAPI Database_GetAPI ();

		/// <summary>
		/// Return the underlying database API.
		/// </summary>
		private static DBAPI GetAPI ()
		{
			Runtime.Validate (typeof(Database));
			return Database_GetAPI ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Database_Connect (IntPtr handle, string connectionString);

		/// <summary>
		/// Create new database connection. Return 0 if failed.
		/// </summary>
		public DbConnection Connect (string connectionString)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<DbConnection> (Database_Connect (handle, connectionString));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Database_Disconnect (IntPtr handle, IntPtr connection);

		/// <summary>
		/// Disconnect a database connection. The connection object pointer should not be used anymore after this.
		/// </summary>
		public void Disconnect (DbConnection connection)
		{
			Runtime.ValidateRefCounted (this);
			Database_Disconnect (handle, (object)connection == null ? IntPtr.Zero : connection.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Database_IsPooling (IntPtr handle);

		/// <summary>
		/// Return true when using internal database connection pool. The internal database pool is managed by the Database subsystem itself and should not be confused with ODBC connection pool option when ODBC is being used.
		/// 
		/// </summary>
		private bool IsPooling ()
		{
			Runtime.ValidateRefCounted (this);
			return Database_IsPooling (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint Database_GetPoolSize (IntPtr handle);

		/// <summary>
		/// Get internal database connection pool size.
		/// 
		/// </summary>
		private uint GetPoolSize ()
		{
			Runtime.ValidateRefCounted (this);
			return Database_GetPoolSize (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Database_SetPoolSize (IntPtr handle, uint poolSize);

		/// <summary>
		/// Set internal database connection pool size.
		/// 
		/// </summary>
		private void SetPoolSize (uint poolSize)
		{
			Runtime.ValidateRefCounted (this);
			Database_SetPoolSize (handle, poolSize);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return the underlying database API.
		/// </summary>
		public static DBAPI API {
			get {
				return GetAPI ();
			}
		}

		/// <summary>
		/// Return true when using internal database connection pool. The internal database pool is managed by the Database subsystem itself and should not be confused with ODBC connection pool option when ODBC is being used.
		/// 
		/// </summary>
		public bool Pooling {
			get {
				return IsPooling ();
			}
		}

		/// <summary>
		/// Get internal database connection pool size.
		/// 
		/// Or
		/// Set internal database connection pool size.
		/// 
		/// </summary>
		public uint PoolSize {
			get {
				return GetPoolSize ();
			}
			set {
				SetPoolSize (value);
			}
		}
	}
}
