// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// KinematicCharacterController.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Construct.
	/// </summary>
	public unsafe partial class KinematicCharacterController : Component
	{
		unsafe partial void OnKinematicCharacterControllerCreated ();

		[Preserve]
		public KinematicCharacterController (IntPtr handle) : base (handle)
		{
			OnKinematicCharacterControllerCreated ();
		}

		[Preserve]
		protected KinematicCharacterController (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnKinematicCharacterControllerCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int KinematicCharacterController_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (KinematicCharacterController_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr KinematicCharacterController_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (KinematicCharacterController_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int KinematicCharacterController_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(KinematicCharacterController));
			return new StringHash (KinematicCharacterController_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr KinematicCharacterController_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(KinematicCharacterController));
			return Marshal.PtrToStringAnsi (KinematicCharacterController_GetTypeNameStatic ());
		}

		[Preserve]
		public KinematicCharacterController () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr KinematicCharacterController_KinematicCharacterController (IntPtr context);

		[Preserve]
		public KinematicCharacterController (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(KinematicCharacterController));
			handle = KinematicCharacterController_KinematicCharacterController ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnKinematicCharacterControllerCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory and attributes.
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(KinematicCharacterController));
			KinematicCharacterController_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_ApplyAttributes (IntPtr handle);

		/// <summary>
		/// Perform post-load after deserialization. Acquire the components from the scene nodes.
		/// </summary>
		public override void ApplyAttributes ()
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_ApplyAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 KinematicCharacterController_GetPosition (IntPtr handle);

		/// <summary>
		/// Return character position in world space.
		/// </summary>
		private Vector3 GetPosition ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*KinematicCharacterController_GetPosition
#else
KinematicCharacterController_GetPosition
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Quaternion *
#else
Quaternion
#endif
 KinematicCharacterController_GetRotation (IntPtr handle);

		/// <summary>
		/// Return character rotation in world space.
		/// </summary>
		private Quaternion GetRotation ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*KinematicCharacterController_GetRotation
#else
KinematicCharacterController_GetRotation
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetTransform (IntPtr handle, ref Urho.Vector3 position, ref Urho.Quaternion rotation);

		/// <summary>
		/// Set character position and rotation in world space as an atomic operation.
		/// </summary>
		public void SetTransform (Urho.Vector3 position, Urho.Quaternion rotation)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetTransform (handle, ref position, ref rotation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetCollisionLayer (IntPtr handle, uint layer);

		/// <summary>
		/// Set collision layer.
		/// </summary>
		private void SetCollisionLayer (uint layer)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetCollisionLayer (handle, layer);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint KinematicCharacterController_GetCollisionLayer (IntPtr handle);

		/// <summary>
		/// Return collision layer.
		/// </summary>
		private uint GetCollisionLayer ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetCollisionLayer (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetCollisionMask (IntPtr handle, uint mask);

		/// <summary>
		/// Set collision mask.
		/// </summary>
		private void SetCollisionMask (uint mask)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetCollisionMask (handle, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint KinematicCharacterController_GetCollisionMask (IntPtr handle);

		/// <summary>
		/// Return collision mask.
		/// </summary>
		private uint GetCollisionMask ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetCollisionMask (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetCollisionLayerAndMask (IntPtr handle, uint layer, uint mask);

		/// <summary>
		/// Set collision group and mask.
		/// </summary>
		public void SetCollisionLayerAndMask (uint layer, uint mask)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetCollisionLayerAndMask (handle, layer, mask);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetGravity (IntPtr handle, ref Urho.Vector3 gravity);

		/// <summary>
		/// Set gravity.
		/// </summary>
		private void SetGravity (Urho.Vector3 gravity)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetGravity (handle, ref gravity);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.Vector3 *
#else
Urho.Vector3
#endif
 KinematicCharacterController_GetGravity (IntPtr handle);

		/// <summary>
		/// Get gravity.
		/// </summary>
		private Urho.Vector3 GetGravity ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*KinematicCharacterController_GetGravity
#else
KinematicCharacterController_GetGravity
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetLinearDamping (IntPtr handle, float linearDamping);

		/// <summary>
		/// Set linear velocity damping factor.
		/// </summary>
		private void SetLinearDamping (float linearDamping)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetLinearDamping (handle, linearDamping);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetLinearDamping (IntPtr handle);

		/// <summary>
		/// Return linear velocity damping factor.
		/// </summary>
		private float GetLinearDamping ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetLinearDamping (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetAngularDamping (IntPtr handle, float angularDamping);

		/// <summary>
		/// Set angular velocity damping factor.
		/// </summary>
		private void SetAngularDamping (float angularDamping)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetAngularDamping (handle, angularDamping);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetAngularDamping (IntPtr handle);

		/// <summary>
		/// Return linear velocity damping factor.
		/// </summary>
		private float GetAngularDamping ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetAngularDamping (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetStepHeight (IntPtr handle, float stepHeight);

		/// <summary>
		/// Set step height.
		/// </summary>
		private void SetStepHeight (float stepHeight)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetStepHeight (handle, stepHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetStepHeight (IntPtr handle);

		/// <summary>
		/// Return step height.
		/// </summary>
		private float GetStepHeight ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetStepHeight (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetMaxJumpHeight (IntPtr handle, float maxJumpHeight);

		/// <summary>
		/// Set max jump height.
		/// </summary>
		private void SetMaxJumpHeight (float maxJumpHeight)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetMaxJumpHeight (handle, maxJumpHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetMaxJumpHeight (IntPtr handle);

		/// <summary>
		/// Return max jump height.
		/// </summary>
		private float GetMaxJumpHeight ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetMaxJumpHeight (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetFallSpeed (IntPtr handle, float fallSpeed);

		/// <summary>
		/// Set fall speed (terminal velocity).
		/// </summary>
		private void SetFallSpeed (float fallSpeed)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetFallSpeed (handle, fallSpeed);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetFallSpeed (IntPtr handle);

		/// <summary>
		/// Return fall speed (terminal velocity).
		/// </summary>
		private float GetFallSpeed ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetFallSpeed (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetJumpSpeed (IntPtr handle, float jumpSpeed);

		/// <summary>
		/// Set jump speed.
		/// </summary>
		private void SetJumpSpeed (float jumpSpeed)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetJumpSpeed (handle, jumpSpeed);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetJumpSpeed (IntPtr handle);

		/// <summary>
		/// Return jump speed.
		/// </summary>
		private float GetJumpSpeed ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetJumpSpeed (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetMaxSlope (IntPtr handle, float maxSlope);

		/// <summary>
		/// Set max slope angle in degrees.
		/// </summary>
		private void SetMaxSlope (float maxSlope)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetMaxSlope (handle, maxSlope);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float KinematicCharacterController_GetMaxSlope (IntPtr handle);

		/// <summary>
		/// Return max slope angle in degrees.
		/// </summary>
		private float GetMaxSlope ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_GetMaxSlope (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetWalkDirection (IntPtr handle, ref Urho.Vector3 walkDir);

		/// <summary>
		/// Set walk direction. This is neither a direction nor a velocity, but the amount to increment the position each simulation iteration, regardless of dt.
		/// </summary>
		public void SetWalkDirection (Urho.Vector3 walkDir)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetWalkDirection (handle, ref walkDir);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool KinematicCharacterController_OnGround (IntPtr handle);

		/// <summary>
		/// Check if character in on the ground.
		/// </summary>
		public bool OnGround ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_OnGround (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_Jump (IntPtr handle, ref Urho.Vector3 jump);

		/// <summary>
		/// Jump.
		/// </summary>
		public void Jump (Urho.Vector3 jump)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_Jump (handle, ref jump);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_ApplyImpulse (IntPtr handle, ref Urho.Vector3 impulse);

		/// <summary>
		/// ApplyImpulse is same as Jump
		/// </summary>
		public void ApplyImpulse (Urho.Vector3 impulse)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_ApplyImpulse (handle, ref impulse);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool KinematicCharacterController_CanJump (IntPtr handle);

		/// <summary>
		/// Check if character can jump.
		/// </summary>
		public bool CanJump ()
		{
			Runtime.ValidateRefCounted (this);
			return KinematicCharacterController_CanJump (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetAngularVelocity (IntPtr handle, ref Urho.Vector3 velocity);

		/// <summary>
		/// Set angular velocity.
		/// </summary>
		public void SetAngularVelocity (Urho.Vector3 velocity)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetAngularVelocity (handle, ref velocity);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 KinematicCharacterController_GetAngularVelocity (IntPtr handle);

		/// <summary>
		/// Return angular velocity.
		/// </summary>
		private Vector3 GetAngularVelocity ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*KinematicCharacterController_GetAngularVelocity
#else
KinematicCharacterController_GetAngularVelocity
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetLinearVelocity (IntPtr handle, ref Urho.Vector3 velocity);

		/// <summary>
		/// Set linear velocity.
		/// </summary>
		public void SetLinearVelocity (Urho.Vector3 velocity)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetLinearVelocity (handle, ref velocity);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 KinematicCharacterController_GetLinearVelocity (IntPtr handle);

		/// <summary>
		/// Return linear velocity.
		/// </summary>
		private Vector3 GetLinearVelocity ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*KinematicCharacterController_GetLinearVelocity
#else
KinematicCharacterController_GetLinearVelocity
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_Warp (IntPtr handle, ref Urho.Vector3 position);

		/// <summary>
		/// Teleport character into new position.
		/// </summary>
		public void Warp (Urho.Vector3 position)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_Warp (handle, ref position);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_DrawDebugGeometry (IntPtr handle);

		/// <summary>
		/// Draw debug geometry.
		/// </summary>
		public void DrawDebugGeometry ()
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_DrawDebugGeometry (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetPosition (IntPtr handle, ref Urho.Vector3 position);

		/// <summary>
		/// Set  position in world space.
		/// 
		/// </summary>
		public void SetPosition (Urho.Vector3 position)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetPosition (handle, ref position);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void KinematicCharacterController_SetRotation (IntPtr handle, ref Urho.Quaternion rotation);

		/// <summary>
		/// Set rotation in world space.
		/// 
		/// </summary>
		public void SetRotation (Urho.Quaternion rotation)
		{
			Runtime.ValidateRefCounted (this);
			KinematicCharacterController_SetRotation (handle, ref rotation);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return character position in world space.
		/// </summary>
		public Vector3 Position {
			get {
				return GetPosition ();
			}
		}

		/// <summary>
		/// Return character rotation in world space.
		/// </summary>
		public Quaternion Rotation {
			get {
				return GetRotation ();
			}
		}

		/// <summary>
		/// Return collision layer.
		/// Or
		/// Set collision layer.
		/// </summary>
		public uint CollisionLayer {
			get {
				return GetCollisionLayer ();
			}
			set {
				SetCollisionLayer (value);
			}
		}

		/// <summary>
		/// Return collision mask.
		/// Or
		/// Set collision mask.
		/// </summary>
		public uint CollisionMask {
			get {
				return GetCollisionMask ();
			}
			set {
				SetCollisionMask (value);
			}
		}

		/// <summary>
		/// Get gravity.
		/// Or
		/// Set gravity.
		/// </summary>
		public Urho.Vector3 Gravity {
			get {
				return GetGravity ();
			}
			set {
				SetGravity (value);
			}
		}

		/// <summary>
		/// Return linear velocity damping factor.
		/// Or
		/// Set linear velocity damping factor.
		/// </summary>
		public float LinearDamping {
			get {
				return GetLinearDamping ();
			}
			set {
				SetLinearDamping (value);
			}
		}

		/// <summary>
		/// Return linear velocity damping factor.
		/// Or
		/// Set angular velocity damping factor.
		/// </summary>
		public float AngularDamping {
			get {
				return GetAngularDamping ();
			}
			set {
				SetAngularDamping (value);
			}
		}

		/// <summary>
		/// Return step height.
		/// Or
		/// Set step height.
		/// </summary>
		public float StepHeight {
			get {
				return GetStepHeight ();
			}
			set {
				SetStepHeight (value);
			}
		}

		/// <summary>
		/// Return max jump height.
		/// Or
		/// Set max jump height.
		/// </summary>
		public float MaxJumpHeight {
			get {
				return GetMaxJumpHeight ();
			}
			set {
				SetMaxJumpHeight (value);
			}
		}

		/// <summary>
		/// Return fall speed (terminal velocity).
		/// Or
		/// Set fall speed (terminal velocity).
		/// </summary>
		public float FallSpeed {
			get {
				return GetFallSpeed ();
			}
			set {
				SetFallSpeed (value);
			}
		}

		/// <summary>
		/// Return jump speed.
		/// Or
		/// Set jump speed.
		/// </summary>
		public float JumpSpeed {
			get {
				return GetJumpSpeed ();
			}
			set {
				SetJumpSpeed (value);
			}
		}

		/// <summary>
		/// Return max slope angle in degrees.
		/// Or
		/// Set max slope angle in degrees.
		/// </summary>
		public float MaxSlope {
			get {
				return GetMaxSlope ();
			}
			set {
				SetMaxSlope (value);
			}
		}

		/// <summary>
		/// Return angular velocity.
		/// </summary>
		public Vector3 AngularVelocity {
			get {
				return GetAngularVelocity ();
			}
		}

		/// <summary>
		/// Return linear velocity.
		/// </summary>
		public Vector3 LinearVelocity {
			get {
				return GetLinearVelocity ();
			}
		}
	}
}
