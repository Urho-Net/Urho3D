// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// SceneResolver.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho
{
	/// <summary>
	/// Utility class that resolves node
	/// </summary>
	public unsafe partial class SceneResolver
	{
		private IntPtr handle;

		public IntPtr Handle {
			get {
				return handle;
			}
		}

		unsafe partial void OnSceneResolverCreated ();

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr SceneResolver_SceneResolver ();

		[Preserve]
		public SceneResolver ()
		{
			Runtime.Validate (typeof(SceneResolver));
			handle = SceneResolver_SceneResolver ();
			OnSceneResolverCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void SceneResolver_Reset (IntPtr handle);

		/// <summary>
		/// Reset. Clear all remembered nodes and components.
		/// </summary>
		public void Reset ()
		{
			Runtime.ValidateObject (this);
			SceneResolver_Reset (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void SceneResolver_AddNode (IntPtr handle, uint oldID, IntPtr node);

		/// <summary>
		/// Remember a created node.
		/// </summary>
		public void AddNode (uint oldID, Node node)
		{
			Runtime.ValidateObject (this);
			SceneResolver_AddNode (handle, oldID, (object)node == null ? IntPtr.Zero : node.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void SceneResolver_AddComponent (IntPtr handle, uint oldID, IntPtr component);

		/// <summary>
		/// Remember a created component.
		/// </summary>
		public void AddComponent (uint oldID, Component component)
		{
			Runtime.ValidateObject (this);
			SceneResolver_AddComponent (handle, oldID, (object)component == null ? IntPtr.Zero : component.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void SceneResolver_Resolve (IntPtr handle);

		/// <summary>
		/// Resolve component and node ID attributes and reset.
		/// </summary>
		public void Resolve ()
		{
			Runtime.ValidateObject (this);
			SceneResolver_Resolve (handle);
		}
	}
}
