// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// VectorGraphics.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho
{
	/// <summary>
	/// Initialize when screen mode initially set.
	/// </summary>
	public unsafe partial class VectorGraphics : UrhoObject
	{
		unsafe partial void OnVectorGraphicsCreated ();

		[Preserve]
		public VectorGraphics (IntPtr handle) : base (handle)
		{
			OnVectorGraphicsCreated ();
		}

		[Preserve]
		protected VectorGraphics (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnVectorGraphicsCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (VectorGraphics_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VectorGraphics_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (VectorGraphics_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(VectorGraphics));
			return new StringHash (VectorGraphics_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VectorGraphics_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(VectorGraphics));
			return Marshal.PtrToStringAnsi (VectorGraphics_GetTypeNameStatic ());
		}

		[Preserve]
		public VectorGraphics () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VectorGraphics_VectorGraphics (IntPtr context);

		[Preserve]
		public VectorGraphics (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(VectorGraphics));
			handle = VectorGraphics_VectorGraphics ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnVectorGraphicsCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_Initialize (IntPtr handle);

		/// <summary>
		/// Initialize when screen mode initially set.
		/// </summary>
		public void Initialize ()
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_Initialize (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_Clear (IntPtr handle);

		public void Clear ()
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_Clear (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern NVGcontext* VectorGraphics_GetNVGContext (IntPtr handle);

		private NVGcontext* GetNVGContext ()
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_GetNVGContext (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VectorGraphics_GetCurrentFrameBuffer (IntPtr handle);

		private VGFrameBuffer GetCurrentFrameBuffer ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<VGFrameBuffer> (VectorGraphics_GetCurrentFrameBuffer (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateFont (IntPtr handle, string name, string filename);

		public int CreateFont (string name, string filename)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateFont (handle, name, filename);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateFontAtIndex (IntPtr handle, string name, string filename, int fontIndex);

		public int CreateFontAtIndex (string name, string filename, int fontIndex)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateFontAtIndex (handle, name, filename, fontIndex);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateFontMem (IntPtr handle, string name, byte* data, int ndata);

		public int CreateFontMem (string name, byte* data, int ndata)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateFontMem (handle, name, data, ndata);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateFontMemAtIndex (IntPtr handle, string name, byte* data, int ndata, int fontIndex);

		public int CreateFontMemAtIndex (string name, byte* data, int ndata, int fontIndex)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateFontMemAtIndex (handle, name, data, ndata, fontIndex);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_FindFont (IntPtr handle, string name);

		public int FindFont (string name)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_FindFont (handle, name);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_AddFallbackFontId (IntPtr handle, int baseFont, int fallbackFont);

		public int AddFallbackFontId (int baseFont, int fallbackFont)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_AddFallbackFontId (handle, baseFont, fallbackFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_ResetFallbackFontsId (IntPtr handle, int baseFont);

		public void ResetFallbackFontsId (int baseFont)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_ResetFallbackFontsId (handle, baseFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_AddFallbackFont (IntPtr handle, string baseFont, string fallbackFont);

		public int AddFallbackFont (string baseFont, string fallbackFont)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_AddFallbackFont (handle, baseFont, fallbackFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_ResetFallbackFonts (IntPtr handle, string baseFont);

		public void ResetFallbackFonts (string baseFont)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_ResetFallbackFonts (handle, baseFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateImage (IntPtr handle, string filename, int imageFlags);

		public int CreateImage (string filename, int imageFlags)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateImage (handle, filename, imageFlags);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateImageMem (IntPtr handle, int imageFlags, byte* data, int ndata);

		public int CreateImageMem (int imageFlags, byte* data, int ndata)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateImageMem (handle, imageFlags, data, ndata);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_LoadSVGImage (IntPtr handle, string filename, float width, float height, int imageFlags);

		public int LoadSVGImage (string filename, float width, float height, int imageFlags)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_LoadSVGImage (handle, filename, width, height, imageFlags);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VectorGraphics_GetSVGHeight (IntPtr handle, string filename);

		public float GetSVGHeight (string filename)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_GetSVGHeight (handle, filename);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VectorGraphics_GetSVGWidth (IntPtr handle, string filename);

		public float GetSVGWidth (string filename)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_GetSVGWidth (handle, filename);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_GetSVGSize (IntPtr handle, string filename, float* height, float* width);

		public void GetSVGSize (string filename, float* height, float* width)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_GetSVGSize (handle, filename, height, width);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VectorGraphics_CreateImageRGBA (IntPtr handle, int w, int h, int imageFlags, byte* data);

		public int CreateImageRGBA (int w, int h, int imageFlags, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			return VectorGraphics_CreateImageRGBA (handle, w, h, imageFlags, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_UpdateImage (IntPtr handle, int image, byte* data);

		public void UpdateImage (int image, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_UpdateImage (handle, image, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_ImageSize (IntPtr handle, int image, int* w, int* h);

		public void ImageSize (int image, int* w, int* h)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_ImageSize (handle, image, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VectorGraphics_DeleteImage (IntPtr handle, int image);

		public void DeleteImage (int image)
		{
			Runtime.ValidateRefCounted (this);
			VectorGraphics_DeleteImage (handle, image);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VectorGraphics_LoadSVGIntoTexture (IntPtr handle, string path);

		public Texture2D LoadSVGIntoTexture (string path)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupRefCounted<Texture2D> (VectorGraphics_LoadSVGIntoTexture (handle, path));
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		public NVGcontext* NVGContext {
			get {
				return GetNVGContext ();
			}
		}

		public VGFrameBuffer CurrentFrameBuffer {
			get {
				return GetCurrentFrameBuffer ();
			}
		}
	}
}
