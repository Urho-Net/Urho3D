// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// StaticSprite2D.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;

namespace Urho.Urho2D
{
	/// <summary>
	/// Static sprite component.
	/// </summary>
	public unsafe partial class StaticSprite2D : Drawable2D
	{
		unsafe partial void OnStaticSprite2DCreated ();

		[Preserve]
		public StaticSprite2D (IntPtr handle) : base (handle)
		{
			OnStaticSprite2DCreated ();
		}

		[Preserve]
		protected StaticSprite2D (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnStaticSprite2DCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int StaticSprite2D_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (StaticSprite2D_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr StaticSprite2D_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (StaticSprite2D_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int StaticSprite2D_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(StaticSprite2D));
			return new StringHash (StaticSprite2D_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr StaticSprite2D_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(StaticSprite2D));
			return Marshal.PtrToStringAnsi (StaticSprite2D_GetTypeNameStatic ());
		}

		[Preserve]
		public StaticSprite2D () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr StaticSprite2D_StaticSprite2D (IntPtr context);

		[Preserve]
		public StaticSprite2D (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(StaticSprite2D));
			handle = StaticSprite2D_StaticSprite2D ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnStaticSprite2DCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory. Drawable2D must be registered first.
		/// 
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(StaticSprite2D));
			StaticSprite2D_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetSprite (IntPtr handle, IntPtr sprite);

		/// <summary>
		/// Set sprite.
		/// 
		/// </summary>
		private void SetSprite (Sprite2D sprite)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetSprite (handle, (object)sprite == null ? IntPtr.Zero : sprite.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetBlendMode (IntPtr handle, BlendMode blendMode);

		/// <summary>
		/// Set blend mode.
		/// 
		/// </summary>
		private void SetBlendMode (BlendMode blendMode)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetBlendMode (handle, blendMode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetFlip (IntPtr handle, bool flipX, bool flipY, bool swapXY);

		/// <summary>
		/// Set flip.
		/// </summary>
		public void SetFlip (bool flipX, bool flipY, bool swapXY = false)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetFlip (handle, flipX, flipY, swapXY);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetFlipX (IntPtr handle, bool flipX);

		/// <summary>
		/// Set flip X.
		/// 
		/// </summary>
		private void SetFlipX (bool flipX)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetFlipX (handle, flipX);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetFlipY (IntPtr handle, bool flipY);

		/// <summary>
		/// Set flip Y.
		/// 
		/// </summary>
		private void SetFlipY (bool flipY)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetFlipY (handle, flipY);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetSwapXY (IntPtr handle, bool swapXY);

		/// <summary>
		/// Set swap X and Y.
		/// 
		/// </summary>
		private void SetSwapXY (bool swapXY)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetSwapXY (handle, swapXY);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetColor (IntPtr handle, ref Urho.Color color);

		/// <summary>
		/// Set color.
		/// 
		/// </summary>
		private void SetColor (Urho.Color color)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetColor (handle, ref color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetAlpha (IntPtr handle, float alpha);

		/// <summary>
		/// Set alpha.
		/// 
		/// </summary>
		private void SetAlpha (float alpha)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetAlpha (handle, alpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetUseHotSpot (IntPtr handle, bool useHotSpot);

		/// <summary>
		/// Set whether to use custom-defined hot spot.
		/// 
		/// </summary>
		private void SetUseHotSpot (bool useHotSpot)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetUseHotSpot (handle, useHotSpot);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetUseDrawRect (IntPtr handle, bool useDrawRect);

		/// <summary>
		/// Set whether to use custom-defined draw rectangle.
		/// 
		/// </summary>
		private void SetUseDrawRect (bool useDrawRect)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetUseDrawRect (handle, useDrawRect);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetUseTextureRect (IntPtr handle, bool useTextureRect);

		/// <summary>
		/// Set whether to use custom-defined texture rectangle.
		/// 
		/// </summary>
		private void SetUseTextureRect (bool useTextureRect)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetUseTextureRect (handle, useTextureRect);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetHotSpot (IntPtr handle, ref Urho.Vector2 hotspot);

		/// <summary>
		/// Set hot spot.
		/// 
		/// </summary>
		private void SetHotSpot (Urho.Vector2 hotspot)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetHotSpot (handle, ref hotspot);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetCustomMaterial (IntPtr handle, IntPtr customMaterial);

		/// <summary>
		/// Set custom material.
		/// 
		/// </summary>
		private void SetCustomMaterial (Material customMaterial)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetCustomMaterial (handle, (object)customMaterial == null ? IntPtr.Zero : customMaterial.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr StaticSprite2D_GetSprite (IntPtr handle);

		/// <summary>
		/// Return sprite.
		/// 
		/// </summary>
		private Sprite2D GetSprite ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Sprite2D> (StaticSprite2D_GetSprite (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern BlendMode StaticSprite2D_GetBlendMode (IntPtr handle);

		/// <summary>
		/// Return blend mode.
		/// 
		/// </summary>
		private BlendMode GetBlendMode ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetBlendMode (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetFlipX (IntPtr handle);

		/// <summary>
		/// Return flip X.
		/// 
		/// </summary>
		private bool GetFlipX ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetFlipX (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetFlipY (IntPtr handle);

		/// <summary>
		/// Return flip Y.
		/// 
		/// </summary>
		private bool GetFlipY ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetFlipY (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetSwapXY (IntPtr handle);

		/// <summary>
		/// Return swap X and Y.
		/// 
		/// </summary>
		private bool GetSwapXY ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetSwapXY (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.Color *
#else
Urho.Color
#endif
 StaticSprite2D_GetColor (IntPtr handle);

		/// <summary>
		/// Return color.
		/// 
		/// </summary>
		private Urho.Color GetColor ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*StaticSprite2D_GetColor
#else
StaticSprite2D_GetColor
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float StaticSprite2D_GetAlpha (IntPtr handle);

		/// <summary>
		/// Return alpha.
		/// 
		/// </summary>
		private float GetAlpha ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetAlpha (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetUseHotSpot (IntPtr handle);

		/// <summary>
		/// Return whether to use custom-defined hot spot.
		/// 
		/// </summary>
		private bool GetUseHotSpot ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetUseHotSpot (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetUseDrawRect (IntPtr handle);

		/// <summary>
		/// Return whether to use custom-defined draw rectangle.
		/// 
		/// </summary>
		private bool GetUseDrawRect ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetUseDrawRect (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool StaticSprite2D_GetUseTextureRect (IntPtr handle);

		/// <summary>
		/// Return whether to use custom-defined texture rectangle.
		/// 
		/// </summary>
		private bool GetUseTextureRect ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetUseTextureRect (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.Vector2 *
#else
Urho.Vector2
#endif
 StaticSprite2D_GetHotSpot (IntPtr handle);

		/// <summary>
		/// Return hot spot.
		/// 
		/// </summary>
		private Urho.Vector2 GetHotSpot ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*StaticSprite2D_GetHotSpot
#else
StaticSprite2D_GetHotSpot
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr StaticSprite2D_GetCustomMaterial (IntPtr handle);

		/// <summary>
		/// Return custom material.
		/// 
		/// </summary>
		private Material GetCustomMaterial ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Material> (StaticSprite2D_GetCustomMaterial (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef StaticSprite2D_GetSpriteAttr (IntPtr handle);

		/// <summary>
		/// Return sprite attribute.
		/// </summary>
		private ResourceRef GetSpriteAttr ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetSpriteAttr (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern ResourceRef StaticSprite2D_GetCustomMaterialAttr (IntPtr handle);

		/// <summary>
		/// Return custom material attribute.
		/// </summary>
		private ResourceRef GetCustomMaterialAttr ()
		{
			Runtime.ValidateRefCounted (this);
			return StaticSprite2D_GetCustomMaterialAttr (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void StaticSprite2D_SetMonoWorldBoundingBoxUpdate (IntPtr handle, bool val);

		public void SetMonoWorldBoundingBoxUpdate (bool val)
		{
			Runtime.ValidateRefCounted (this);
			StaticSprite2D_SetMonoWorldBoundingBoxUpdate (handle, val);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return sprite.
		/// 
		/// Or
		/// Set sprite.
		/// 
		/// </summary>
		public Sprite2D Sprite {
			get {
				return GetSprite ();
			}
			set {
				SetSprite (value);
			}
		}

		/// <summary>
		/// Return blend mode.
		/// 
		/// Or
		/// Set blend mode.
		/// 
		/// </summary>
		public BlendMode BlendMode {
			get {
				return GetBlendMode ();
			}
			set {
				SetBlendMode (value);
			}
		}

		/// <summary>
		/// Return flip X.
		/// 
		/// Or
		/// Set flip X.
		/// 
		/// </summary>
		public bool FlipX {
			get {
				return GetFlipX ();
			}
			set {
				SetFlipX (value);
			}
		}

		/// <summary>
		/// Return flip Y.
		/// 
		/// Or
		/// Set flip Y.
		/// 
		/// </summary>
		public bool FlipY {
			get {
				return GetFlipY ();
			}
			set {
				SetFlipY (value);
			}
		}

		/// <summary>
		/// Return swap X and Y.
		/// 
		/// Or
		/// Set swap X and Y.
		/// 
		/// </summary>
		public bool SwapXY {
			get {
				return GetSwapXY ();
			}
			set {
				SetSwapXY (value);
			}
		}

		/// <summary>
		/// Return color.
		/// 
		/// Or
		/// Set color.
		/// 
		/// </summary>
		public Urho.Color Color {
			get {
				return GetColor ();
			}
			set {
				SetColor (value);
			}
		}

		/// <summary>
		/// Return alpha.
		/// 
		/// Or
		/// Set alpha.
		/// 
		/// </summary>
		public float Alpha {
			get {
				return GetAlpha ();
			}
			set {
				SetAlpha (value);
			}
		}

		/// <summary>
		/// Return whether to use custom-defined hot spot.
		/// 
		/// Or
		/// Set whether to use custom-defined hot spot.
		/// 
		/// </summary>
		public bool UseHotSpot {
			get {
				return GetUseHotSpot ();
			}
			set {
				SetUseHotSpot (value);
			}
		}

		/// <summary>
		/// Return whether to use custom-defined draw rectangle.
		/// 
		/// Or
		/// Set whether to use custom-defined draw rectangle.
		/// 
		/// </summary>
		public bool UseDrawRect {
			get {
				return GetUseDrawRect ();
			}
			set {
				SetUseDrawRect (value);
			}
		}

		/// <summary>
		/// Return whether to use custom-defined texture rectangle.
		/// 
		/// Or
		/// Set whether to use custom-defined texture rectangle.
		/// 
		/// </summary>
		public bool UseTextureRect {
			get {
				return GetUseTextureRect ();
			}
			set {
				SetUseTextureRect (value);
			}
		}

		/// <summary>
		/// Return hot spot.
		/// 
		/// Or
		/// Set hot spot.
		/// 
		/// </summary>
		public Urho.Vector2 HotSpot {
			get {
				return GetHotSpot ();
			}
			set {
				SetHotSpot (value);
			}
		}

		/// <summary>
		/// Return custom material.
		/// 
		/// Or
		/// Set custom material.
		/// 
		/// </summary>
		public Material CustomMaterial {
			get {
				return GetCustomMaterial ();
			}
			set {
				SetCustomMaterial (value);
			}
		}

		/// <summary>
		/// Return sprite attribute.
		/// </summary>
		public ResourceRef SpriteAttr {
			get {
				return GetSpriteAttr ();
			}
		}

		/// <summary>
		/// Return custom material attribute.
		/// </summary>
		public ResourceRef CustomMaterialAttr {
			get {
				return GetCustomMaterialAttr ();
			}
		}
	}
}
