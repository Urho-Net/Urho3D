// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// VGFrameBuffer.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	public unsafe partial class VGFrameBuffer : Component
	{
		unsafe partial void OnVGFrameBufferCreated ();

		[Preserve]
		public VGFrameBuffer (IntPtr handle) : base (handle)
		{
			OnVGFrameBufferCreated ();
		}

		[Preserve]
		protected VGFrameBuffer (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnVGFrameBufferCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (VGFrameBuffer_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (VGFrameBuffer_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			return new StringHash (VGFrameBuffer_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			return Marshal.PtrToStringAnsi (VGFrameBuffer_GetTypeNameStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_RegisterObject (IntPtr context);

		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			VGFrameBuffer_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_Current ();

		public static VGFrameBuffer Current ()
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			return Runtime.LookupObject<VGFrameBuffer> (VGFrameBuffer_Current ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_VGFrameBuffer (IntPtr context, int Width, int Height);

		[Preserve]
		public VGFrameBuffer (Context context, int Width, int Height) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			handle = VGFrameBuffer_VGFrameBuffer ((object)context == null ? IntPtr.Zero : context.Handle, Width, Height);
			Runtime.RegisterObject (this);
			OnVGFrameBufferCreated ();
		}

		[Preserve]
		public VGFrameBuffer () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_VGFrameBuffer0 (IntPtr context);

		[Preserve]
		public VGFrameBuffer (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(VGFrameBuffer));
			handle = VGFrameBuffer_VGFrameBuffer0 ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnVGFrameBufferCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool VGFrameBuffer_CreateFrameBuffer (IntPtr handle, int Width, int Height);

		public bool CreateFrameBuffer (int Width, int Height)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_CreateFrameBuffer (handle, Width, Height);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Bind (IntPtr handle);

		public void Bind ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Bind (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_UnBind (IntPtr handle);

		public void UnBind ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_UnBind (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGFrameBuffer_GetRenderTarget (IntPtr handle);

		private Texture2D GetRenderTarget ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Texture2D> (VGFrameBuffer_GetRenderTarget (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.IntVector2 *
#else
Urho.IntVector2
#endif
 VGFrameBuffer_GetSize (IntPtr handle);

		private Urho.IntVector2 GetSize ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_GetSize
#else
VGFrameBuffer_GetSize
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_SetClearColor (IntPtr handle, Color color);

		private void SetClearColor (Color color)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_SetClearColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Color *
#else
Color
#endif
 VGFrameBuffer_GetClearColor (IntPtr handle);

		private Color GetClearColor ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_GetClearColor
#else
VGFrameBuffer_GetClearColor
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_EnableRenderEvents (IntPtr handle);

		public void EnableRenderEvents ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_EnableRenderEvents (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_DisbaleRenderEvents (IntPtr handle);

		public void DisbaleRenderEvents ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_DisbaleRenderEvents (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_BeginFrame (IntPtr handle);

		public void BeginFrame ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_BeginFrame (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_CancelFrame (IntPtr handle);

		public void CancelFrame ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_CancelFrame (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_EndFrame (IntPtr handle);

		public void EndFrame ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_EndFrame (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_GlobalCompositeOperation (IntPtr handle, int op);

		public void GlobalCompositeOperation (int op)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_GlobalCompositeOperation (handle, op);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_GlobalCompositeBlendFunc (IntPtr handle, int sfactor, int dfactor);

		public void GlobalCompositeBlendFunc (int sfactor, int dfactor)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_GlobalCompositeBlendFunc (handle, sfactor, dfactor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_GlobalCompositeBlendFuncSeparate (IntPtr handle, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

		public void GlobalCompositeBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_GlobalCompositeBlendFuncSeparate (handle, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_RGB (IntPtr handle, byte r, byte g, byte b);

		public NVGcolor RGB (byte r, byte g, byte b)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_RGB
#else
VGFrameBuffer_RGB
#endif
 (handle, r, g, b);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_RGBf (IntPtr handle, float r, float g, float b);

		public NVGcolor RGBf (float r, float g, float b)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_RGBf
#else
VGFrameBuffer_RGBf
#endif
 (handle, r, g, b);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_RGBA (IntPtr handle, byte r, byte g, byte b, byte a);

		public NVGcolor RGBA (byte r, byte g, byte b, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_RGBA
#else
VGFrameBuffer_RGBA
#endif
 (handle, r, g, b, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_RGBAf (IntPtr handle, float r, float g, float b, float a);

		public NVGcolor RGBAf (float r, float g, float b, float a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_RGBAf
#else
VGFrameBuffer_RGBAf
#endif
 (handle, r, g, b, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_LerpRGBA (IntPtr handle, NVGcolor c0, NVGcolor c1, float u);

		public NVGcolor LerpRGBA (NVGcolor c0, NVGcolor c1, float u)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_LerpRGBA
#else
VGFrameBuffer_LerpRGBA
#endif
 (handle, c0, c1, u);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_TransRGBA (IntPtr handle, NVGcolor c0, byte a);

		public NVGcolor TransRGBA (NVGcolor c0, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_TransRGBA
#else
VGFrameBuffer_TransRGBA
#endif
 (handle, c0, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_TransRGBAf (IntPtr handle, NVGcolor c0, float a);

		public NVGcolor TransRGBAf (NVGcolor c0, float a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_TransRGBAf
#else
VGFrameBuffer_TransRGBAf
#endif
 (handle, c0, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_HSL (IntPtr handle, float h, float s, float l);

		public NVGcolor HSL (float h, float s, float l)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_HSL
#else
VGFrameBuffer_HSL
#endif
 (handle, h, s, l);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGFrameBuffer_HSLA (IntPtr handle, float h, float s, float l, byte a);

		public NVGcolor HSLA (float h, float s, float l, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_HSLA
#else
VGFrameBuffer_HSLA
#endif
 (handle, h, s, l, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_SaveState (IntPtr handle);

		public void SaveState ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_SaveState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_RestoreState (IntPtr handle);

		public void RestoreState ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_RestoreState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ResetState (IntPtr handle);

		public void ResetState ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ResetState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ShapeAntiAlias (IntPtr handle, int enabled);

		public void ShapeAntiAlias (int enabled)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ShapeAntiAlias (handle, enabled);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_StrokeColor (IntPtr handle, NVGcolor color);

		public void StrokeColor (NVGcolor color)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_StrokeColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_StrokePaint (IntPtr handle, NVGpaint paint);

		public void StrokePaint (NVGpaint paint)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_StrokePaint (handle, paint);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FillColor (IntPtr handle, NVGcolor color);

		public void FillColor (NVGcolor color)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FillColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FillPaint (IntPtr handle, NVGpaint paint);

		public void FillPaint (NVGpaint paint)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FillPaint (handle, paint);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_MiterLimit (IntPtr handle, float limit);

		public void MiterLimit (float limit)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_MiterLimit (handle, limit);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_StrokeWidth (IntPtr handle, float size);

		public void StrokeWidth (float size)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_StrokeWidth (handle, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_LineCap (IntPtr handle, int cap);

		public void LineCap (int cap)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_LineCap (handle, cap);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_LineJoin (IntPtr handle, int join);

		public void LineJoin (int join)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_LineJoin (handle, join);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_GlobalAlpha (IntPtr handle, float alpha);

		public void GlobalAlpha (float alpha)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_GlobalAlpha (handle, alpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ResetTransform (IntPtr handle);

		public void ResetTransform ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ResetTransform (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Transform (IntPtr handle, float a, float b, float c, float d, float e, float f);

		public void Transform (float a, float b, float c, float d, float e, float f)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Transform (handle, a, b, c, d, e, f);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Translate (IntPtr handle, float x, float y);

		public void Translate (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Translate (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Rotate (IntPtr handle, float angle);

		public void Rotate (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Rotate (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_SkewX (IntPtr handle, float angle);

		public void SkewX (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_SkewX (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_SkewY (IntPtr handle, float angle);

		public void SkewY (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_SkewY (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Scale (IntPtr handle, float x, float y);

		public void Scale (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Scale (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_CurrentTransform (IntPtr handle, float* xform);

		public void CurrentTransform (float* xform)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_CurrentTransform (handle, xform);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformIdentity (IntPtr handle, float* dst);

		public void TransformIdentity (float* dst)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformIdentity (handle, dst);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformTranslate (IntPtr handle, float* dst, float tx, float ty);

		public void TransformTranslate (float* dst, float tx, float ty)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformTranslate (handle, dst, tx, ty);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformScale (IntPtr handle, float* dst, float sx, float sy);

		public void TransformScale (float* dst, float sx, float sy)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformScale (handle, dst, sx, sy);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformRotate (IntPtr handle, float* dst, float a);

		public void TransformRotate (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformRotate (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformSkewX (IntPtr handle, float* dst, float a);

		public void TransformSkewX (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformSkewX (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformSkewY (IntPtr handle, float* dst, float a);

		public void TransformSkewY (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformSkewY (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformMultiply (IntPtr handle, float* dst, float* src);

		public void TransformMultiply (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformMultiply (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformPremultiply (IntPtr handle, float* dst, float* src);

		public void TransformPremultiply (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformPremultiply (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_TransformInverse (IntPtr handle, float* dst, float* src);

		public int TransformInverse (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_TransformInverse (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TransformPoint (IntPtr handle, float* dstx, float* dsty, float* xform, float srcx, float srcy);

		public void TransformPoint (float* dstx, float* dsty, float* xform, float srcx, float srcy)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TransformPoint (handle, dstx, dsty, xform, srcx, srcy);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGFrameBuffer_DegToRad (IntPtr handle, float deg);

		public float DegToRad (float deg)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_DegToRad (handle, deg);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGFrameBuffer_RadToDeg (IntPtr handle, float rad);

		public float RadToDeg (float rad)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_RadToDeg (handle, rad);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_CreateImageMem (IntPtr handle, int imageFlags, byte* data, int ndata);

		public int CreateImageMem (int imageFlags, byte* data, int ndata)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_CreateImageMem (handle, imageFlags, data, ndata);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_CreateImageRGBA (IntPtr handle, int w, int h, int imageFlags, byte* data);

		public int CreateImageRGBA (int w, int h, int imageFlags, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_CreateImageRGBA (handle, w, h, imageFlags, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_UpdateImage (IntPtr handle, int image, byte* data);

		public void UpdateImage (int image, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_UpdateImage (handle, image, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ImageSize (IntPtr handle, int image, int* w, int* h);

		public void ImageSize (int image, int* w, int* h)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ImageSize (handle, image, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_DeleteImage (IntPtr handle, int image);

		public void DeleteImage (int image)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_DeleteImage (handle, image);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGFrameBuffer_LinearGradient (IntPtr handle, float sx, float sy, float ex, float ey, NVGcolor icol, NVGcolor ocol);

		public NVGpaint LinearGradient (float sx, float sy, float ex, float ey, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_LinearGradient
#else
VGFrameBuffer_LinearGradient
#endif
 (handle, sx, sy, ex, ey, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGFrameBuffer_BoxGradient (IntPtr handle, float x, float y, float w, float h, float r, float f, NVGcolor icol, NVGcolor ocol);

		public NVGpaint BoxGradient (float x, float y, float w, float h, float r, float f, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_BoxGradient
#else
VGFrameBuffer_BoxGradient
#endif
 (handle, x, y, w, h, r, f, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGFrameBuffer_RadialGradient (IntPtr handle, float cx, float cy, float inr, float outr, NVGcolor icol, NVGcolor ocol);

		public NVGpaint RadialGradient (float cx, float cy, float inr, float outr, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_RadialGradient
#else
VGFrameBuffer_RadialGradient
#endif
 (handle, cx, cy, inr, outr, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGFrameBuffer_ImagePattern (IntPtr handle, float ox, float oy, float ex, float ey, float angle, int image, float alpha);

		public NVGpaint ImagePattern (float ox, float oy, float ex, float ey, float angle, int image, float alpha)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGFrameBuffer_ImagePattern
#else
VGFrameBuffer_ImagePattern
#endif
 (handle, ox, oy, ex, ey, angle, image, alpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Scissor (IntPtr handle, float x, float y, float w, float h);

		public void Scissor (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Scissor (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_IntersectScissor (IntPtr handle, float x, float y, float w, float h);

		public void IntersectScissor (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_IntersectScissor (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ResetScissor (IntPtr handle);

		public void ResetScissor ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ResetScissor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_BeginPath (IntPtr handle);

		public void BeginPath ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_BeginPath (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_MoveTo (IntPtr handle, float x, float y);

		public void MoveTo (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_MoveTo (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_LineTo (IntPtr handle, float x, float y);

		public void LineTo (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_LineTo (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_BezierTo (IntPtr handle, float c1x, float c1y, float c2x, float c2y, float x, float y);

		public void BezierTo (float c1x, float c1y, float c2x, float c2y, float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_BezierTo (handle, c1x, c1y, c2x, c2y, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_QuadTo (IntPtr handle, float cx, float cy, float x, float y);

		public void QuadTo (float cx, float cy, float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_QuadTo (handle, cx, cy, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ArcTo (IntPtr handle, float x1, float y1, float x2, float y2, float radius);

		public void ArcTo (float x1, float y1, float x2, float y2, float radius)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ArcTo (handle, x1, y1, x2, y2, radius);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ClosePath (IntPtr handle);

		public void ClosePath ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ClosePath (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_PathWinding (IntPtr handle, int dir);

		public void PathWinding (int dir)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_PathWinding (handle, dir);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Arc (IntPtr handle, float cx, float cy, float r, float a0, float a1, int dir);

		public void Arc (float cx, float cy, float r, float a0, float a1, int dir)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Arc (handle, cx, cy, r, a0, a1, dir);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Rect (IntPtr handle, float x, float y, float w, float h);

		public void Rect (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Rect (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_RoundedRect (IntPtr handle, float x, float y, float w, float h, float r);

		public void RoundedRect (float x, float y, float w, float h, float r)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_RoundedRect (handle, x, y, w, h, r);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_RoundedRectVarying (IntPtr handle, float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft);

		public void RoundedRectVarying (float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_RoundedRectVarying (handle, x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Ellipse (IntPtr handle, float cx, float cy, float rx, float ry);

		public void Ellipse (float cx, float cy, float rx, float ry)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Ellipse (handle, cx, cy, rx, ry);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Circle (IntPtr handle, float cx, float cy, float r);

		public void Circle (float cx, float cy, float r)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Circle (handle, cx, cy, r);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Fill (IntPtr handle);

		public void Fill ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Fill (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_Stroke (IntPtr handle);

		public void Stroke ()
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_Stroke (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_AddFallbackFontId (IntPtr handle, int baseFont, int fallbackFont);

		public int AddFallbackFontId (int baseFont, int fallbackFont)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_AddFallbackFontId (handle, baseFont, fallbackFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_ResetFallbackFontsId (IntPtr handle, int baseFont);

		public void ResetFallbackFontsId (int baseFont)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_ResetFallbackFontsId (handle, baseFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FontSize (IntPtr handle, float size);

		public void FontSize (float size)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FontSize (handle, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FontBlur (IntPtr handle, float blur);

		public void FontBlur (float blur)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FontBlur (handle, blur);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextLetterSpacing (IntPtr handle, float spacing);

		public void TextLetterSpacing (float spacing)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextLetterSpacing (handle, spacing);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextLineHeight (IntPtr handle, float lineHeight);

		public void TextLineHeight (float lineHeight)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextLineHeight (handle, lineHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextAlign (IntPtr handle, int align);

		public void TextAlign (int align)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextAlign (handle, align);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FontFaceId (IntPtr handle, int font);

		public void FontFaceId (int font)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FontFaceId (handle, font);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextMetrics (IntPtr handle, float* ascender, float* descender, float* lineh);

		public void TextMetrics (float* ascender, float* descender, float* lineh)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextMetrics (handle, ascender, descender, lineh);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_FontFace (IntPtr handle, string font);

		public void FontFace (string font)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_FontFace (handle, font);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGFrameBuffer_Text (IntPtr handle, float x, float y, string str);

		public float Text (float x, float y, string str)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_Text (handle, x, y, str);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextBox (IntPtr handle, float x, float y, float breakRowWidth, string str);

		public void TextBox (float x, float y, float breakRowWidth, string str)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextBox (handle, x, y, breakRowWidth, str);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint VGFrameBuffer_TextBreakLines (IntPtr handle, string str, float breakRowWidth, IntPtr vgTextRowBuffer);

		public uint TextBreakLines (string str, float breakRowWidth, VGTextRowBuffer vgTextRowBuffer)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_TextBreakLines (handle, str, breakRowWidth, (object)vgTextRowBuffer == null ? IntPtr.Zero : vgTextRowBuffer.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGFrameBuffer_TextBounds (IntPtr handle, float x, float y, string str, float* bounds);

		public float TextBounds (float x, float y, string str, float* bounds)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_TextBounds (handle, x, y, str, bounds);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGFrameBuffer_TextBoxBounds (IntPtr handle, float x, float y, float breakRowWidth, string str, float* bounds);

		public void TextBoxBounds (float x, float y, float breakRowWidth, string str, float* bounds)
		{
			Runtime.ValidateRefCounted (this);
			VGFrameBuffer_TextBoxBounds (handle, x, y, breakRowWidth, str, bounds);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGFrameBuffer_TextGlyphPositions (IntPtr handle, float x, float y, string str, float* positions, int maxPositions);

		public int TextGlyphPositions (float x, float y, string str, float* positions, int maxPositions)
		{
			Runtime.ValidateRefCounted (this);
			return VGFrameBuffer_TextGlyphPositions (handle, x, y, str, positions, maxPositions);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		public Texture2D RenderTarget {
			get {
				return GetRenderTarget ();
			}
		}

		public Urho.IntVector2 Size {
			get {
				return GetSize ();
			}
		}

		public Color ClearColor {
			get {
				return GetClearColor ();
			}
			set {
				SetClearColor (value);
			}
		}
	}
}
