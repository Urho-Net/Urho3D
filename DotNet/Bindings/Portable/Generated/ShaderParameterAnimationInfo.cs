// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// ShaderParameterAnimationInfo.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{
	/// <summary>
	/// Material's shader parameter animation instance.
	/// </summary>
	public unsafe partial class ShaderParameterAnimationInfo : ValueAnimationInfo
	{
		unsafe partial void OnShaderParameterAnimationInfoCreated ();

		[Preserve]
		public ShaderParameterAnimationInfo (IntPtr handle) : base (handle)
		{
			OnShaderParameterAnimationInfoCreated ();
		}

		[Preserve]
		protected ShaderParameterAnimationInfo (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnShaderParameterAnimationInfoCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ShaderParameterAnimationInfo_ShaderParameterAnimationInfo (IntPtr material, string name, IntPtr attributeAnimation, WrapMode wrapMode, float speed);

		[Preserve]
		public ShaderParameterAnimationInfo (Material material, string name, ValueAnimation attributeAnimation, WrapMode wrapMode, float speed) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(ShaderParameterAnimationInfo));
			handle = ShaderParameterAnimationInfo_ShaderParameterAnimationInfo ((object)material == null ? IntPtr.Zero : material.Handle, name, (object)attributeAnimation == null ? IntPtr.Zero : attributeAnimation.Handle, wrapMode, speed);
			Runtime.RegisterObject (this);
			OnShaderParameterAnimationInfoCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ShaderParameterAnimationInfo_GetName (IntPtr handle);

		/// <summary>
		/// Return shader parameter name.
		/// </summary>
		private string GetName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (ShaderParameterAnimationInfo_GetName (handle));
		}

		/// <summary>
		/// Return shader parameter name.
		/// </summary>
		public string Name {
			get {
				return GetName ();
			}
		}
	}
}
