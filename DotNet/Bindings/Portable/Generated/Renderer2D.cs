// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Renderer2D.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho.Urho2D
{
	/// <summary>
	/// 2D renderer component.
	/// </summary>
	public unsafe partial class Renderer2D : Drawable
	{
		unsafe partial void OnRenderer2DCreated ();

		[Preserve]
		public Renderer2D (IntPtr handle) : base (handle)
		{
			OnRenderer2DCreated ();
		}

		[Preserve]
		protected Renderer2D (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnRenderer2DCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Renderer2D_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Renderer2D_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Renderer2D_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Renderer2D_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Renderer2D_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Renderer2D));
			return new StringHash (Renderer2D_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Renderer2D_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Renderer2D));
			return Marshal.PtrToStringAnsi (Renderer2D_GetTypeNameStatic ());
		}

		[Preserve]
		public Renderer2D () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Renderer2D_Renderer2D (IntPtr context);

		[Preserve]
		public Renderer2D (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Renderer2D));
			handle = Renderer2D_Renderer2D ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnRenderer2DCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Renderer2D_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// 
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(Renderer2D));
			Renderer2D_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern UpdateGeometryType Renderer2D_GetUpdateGeometryType (IntPtr handle);

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		private UpdateGeometryType GetUpdateGeometryType ()
		{
			Runtime.ValidateRefCounted (this);
			return Renderer2D_GetUpdateGeometryType (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Renderer2D_AddDrawable (IntPtr handle, IntPtr drawable);

		/// <summary>
		/// Add Drawable2D.
		/// </summary>
		public void AddDrawable (Drawable2D drawable)
		{
			Runtime.ValidateRefCounted (this);
			Renderer2D_AddDrawable (handle, (object)drawable == null ? IntPtr.Zero : drawable.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Renderer2D_RemoveDrawable (IntPtr handle, IntPtr drawable);

		/// <summary>
		/// Remove Drawable2D.
		/// </summary>
		public void RemoveDrawable (Drawable2D drawable)
		{
			Runtime.ValidateRefCounted (this);
			Renderer2D_RemoveDrawable (handle, (object)drawable == null ? IntPtr.Zero : drawable.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Renderer2D_GetMaterial (IntPtr handle, IntPtr texture, BlendMode blendMode);

		/// <summary>
		/// Return material by texture and blend mode.
		/// </summary>
		public Material GetMaterial (Texture2D texture, BlendMode blendMode)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Material> (Renderer2D_GetMaterial (handle, (object)texture == null ? IntPtr.Zero : texture.Handle, blendMode));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Renderer2D_CheckVisibility (IntPtr handle, IntPtr drawable);

		/// <summary>
		/// Check visibility.
		/// </summary>
		public bool CheckVisibility (Drawable2D drawable)
		{
			Runtime.ValidateRefCounted (this);
			return Renderer2D_CheckVisibility (handle, (object)drawable == null ? IntPtr.Zero : drawable.Handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether a geometry update is necessary, and if it can happen in a worker thread.
		/// </summary>
		public override UpdateGeometryType UpdateGeometryType {
			get {
				return GetUpdateGeometryType ();
			}
		}
	}
}
