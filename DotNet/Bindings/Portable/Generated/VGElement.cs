// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// VGElement.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho
{
	/// <summary>
	/// Register object factory.
	/// </summary>
	public unsafe partial class VGElement : BorderImage
	{
		unsafe partial void OnVGElementCreated ();

		[Preserve]
		public VGElement (IntPtr handle) : base (handle)
		{
			OnVGElementCreated ();
		}

		[Preserve]
		protected VGElement (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnVGElementCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (VGElement_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGElement_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (VGElement_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(VGElement));
			return new StringHash (VGElement_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGElement_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(VGElement));
			return Marshal.PtrToStringAnsi (VGElement_GetTypeNameStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// 
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(VGElement));
			VGElement_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[Preserve]
		public VGElement () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGElement_VGElement (IntPtr context);

		[Preserve]
		public VGElement (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(VGElement));
			handle = VGElement_VGElement ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnVGElementCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr VGElement_GetRenderTarget (IntPtr handle);

		private Texture2D GetRenderTarget ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Texture2D> (VGElement_GetRenderTarget (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_OnResize (IntPtr handle, ref Urho.IntVector2 newSize, ref Urho.IntVector2 delta);

		/// <summary>
		/// React to resize.
		/// </summary>
		public override void OnResize (Urho.IntVector2 newSize, Urho.IntVector2 delta)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_OnResize (handle, ref newSize, ref delta);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_BeginRender (IntPtr handle);

		public void BeginRender ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_BeginRender (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_EndRender (IntPtr handle);

		public void EndRender ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_EndRender (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.IntVector2 *
#else
Urho.IntVector2
#endif
 VGElement_GetSize (IntPtr handle);

		private Urho.IntVector2 GetSize ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_GetSize
#else
VGElement_GetSize
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_SetClearColor (IntPtr handle, Color color);

		private void SetClearColor (Color color)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_SetClearColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Color *
#else
Color
#endif
 VGElement_GetClearColor (IntPtr handle);

		private Color GetClearColor ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_GetClearColor
#else
VGElement_GetClearColor
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_BeginFrame (IntPtr handle, float windowWidth, float windowHeight, float devicePixelRatio);

		public void BeginFrame (float windowWidth, float windowHeight, float devicePixelRatio)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_BeginFrame (handle, windowWidth, windowHeight, devicePixelRatio);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_CancelFrame (IntPtr handle);

		public void CancelFrame ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_CancelFrame (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_EndFrame (IntPtr handle);

		public void EndFrame ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_EndFrame (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_GlobalCompositeOperation (IntPtr handle, int op);

		public void GlobalCompositeOperation (int op)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_GlobalCompositeOperation (handle, op);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_GlobalCompositeBlendFunc (IntPtr handle, int sfactor, int dfactor);

		public void GlobalCompositeBlendFunc (int sfactor, int dfactor)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_GlobalCompositeBlendFunc (handle, sfactor, dfactor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_GlobalCompositeBlendFuncSeparate (IntPtr handle, int srcRGB, int dstRGB, int srcAlpha, int dstAlpha);

		public void GlobalCompositeBlendFuncSeparate (int srcRGB, int dstRGB, int srcAlpha, int dstAlpha)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_GlobalCompositeBlendFuncSeparate (handle, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_RGB (IntPtr handle, byte r, byte g, byte b);

		public NVGcolor RGB (byte r, byte g, byte b)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_RGB
#else
VGElement_RGB
#endif
 (handle, r, g, b);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_RGBf (IntPtr handle, float r, float g, float b);

		public NVGcolor RGBf (float r, float g, float b)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_RGBf
#else
VGElement_RGBf
#endif
 (handle, r, g, b);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_RGBA (IntPtr handle, byte r, byte g, byte b, byte a);

		public NVGcolor RGBA (byte r, byte g, byte b, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_RGBA
#else
VGElement_RGBA
#endif
 (handle, r, g, b, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_RGBAf (IntPtr handle, float r, float g, float b, float a);

		public NVGcolor RGBAf (float r, float g, float b, float a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_RGBAf
#else
VGElement_RGBAf
#endif
 (handle, r, g, b, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_LerpRGBA (IntPtr handle, NVGcolor c0, NVGcolor c1, float u);

		public NVGcolor LerpRGBA (NVGcolor c0, NVGcolor c1, float u)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_LerpRGBA
#else
VGElement_LerpRGBA
#endif
 (handle, c0, c1, u);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_TransRGBA (IntPtr handle, NVGcolor c0, byte a);

		public NVGcolor TransRGBA (NVGcolor c0, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_TransRGBA
#else
VGElement_TransRGBA
#endif
 (handle, c0, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_TransRGBAf (IntPtr handle, NVGcolor c0, float a);

		public NVGcolor TransRGBAf (NVGcolor c0, float a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_TransRGBAf
#else
VGElement_TransRGBAf
#endif
 (handle, c0, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_HSL (IntPtr handle, float h, float s, float l);

		public NVGcolor HSL (float h, float s, float l)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_HSL
#else
VGElement_HSL
#endif
 (handle, h, s, l);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGcolor *
#else
NVGcolor
#endif
 VGElement_HSLA (IntPtr handle, float h, float s, float l, byte a);

		public NVGcolor HSLA (float h, float s, float l, byte a)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_HSLA
#else
VGElement_HSLA
#endif
 (handle, h, s, l, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_SaveState (IntPtr handle);

		public void SaveState ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_SaveState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_RestoreState (IntPtr handle);

		public void RestoreState ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_RestoreState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ResetState (IntPtr handle);

		public void ResetState ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ResetState (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ShapeAntiAlias (IntPtr handle, int enabled);

		public void ShapeAntiAlias (int enabled)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ShapeAntiAlias (handle, enabled);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_StrokeColor (IntPtr handle, NVGcolor color);

		public void StrokeColor (NVGcolor color)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_StrokeColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_StrokePaint (IntPtr handle, NVGpaint paint);

		public void StrokePaint (NVGpaint paint)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_StrokePaint (handle, paint);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FillColor (IntPtr handle, NVGcolor color);

		public void FillColor (NVGcolor color)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FillColor (handle, color);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FillPaint (IntPtr handle, NVGpaint paint);

		public void FillPaint (NVGpaint paint)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FillPaint (handle, paint);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_MiterLimit (IntPtr handle, float limit);

		public void MiterLimit (float limit)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_MiterLimit (handle, limit);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_StrokeWidth (IntPtr handle, float size);

		public void StrokeWidth (float size)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_StrokeWidth (handle, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_LineCap (IntPtr handle, int cap);

		public void LineCap (int cap)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_LineCap (handle, cap);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_LineJoin (IntPtr handle, int join);

		public void LineJoin (int join)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_LineJoin (handle, join);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_GlobalAlpha (IntPtr handle, float alpha);

		public void GlobalAlpha (float alpha)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_GlobalAlpha (handle, alpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ResetTransform (IntPtr handle);

		public void ResetTransform ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ResetTransform (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Transform (IntPtr handle, float a, float b, float c, float d, float e, float f);

		public void Transform (float a, float b, float c, float d, float e, float f)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Transform (handle, a, b, c, d, e, f);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Translate (IntPtr handle, float x, float y);

		public void Translate (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Translate (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Rotate (IntPtr handle, float angle);

		public void Rotate (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Rotate (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_SkewX (IntPtr handle, float angle);

		public void SkewX (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_SkewX (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_SkewY (IntPtr handle, float angle);

		public void SkewY (float angle)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_SkewY (handle, angle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Scale (IntPtr handle, float x, float y);

		public void Scale (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Scale (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_CurrentTransform (IntPtr handle, float* xform);

		public void CurrentTransform (float* xform)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_CurrentTransform (handle, xform);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformIdentity (IntPtr handle, float* dst);

		public void TransformIdentity (float* dst)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformIdentity (handle, dst);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformTranslate (IntPtr handle, float* dst, float tx, float ty);

		public void TransformTranslate (float* dst, float tx, float ty)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformTranslate (handle, dst, tx, ty);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformScale (IntPtr handle, float* dst, float sx, float sy);

		public void TransformScale (float* dst, float sx, float sy)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformScale (handle, dst, sx, sy);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformRotate (IntPtr handle, float* dst, float a);

		public void TransformRotate (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformRotate (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformSkewX (IntPtr handle, float* dst, float a);

		public void TransformSkewX (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformSkewX (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformSkewY (IntPtr handle, float* dst, float a);

		public void TransformSkewY (float* dst, float a)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformSkewY (handle, dst, a);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformMultiply (IntPtr handle, float* dst, float* src);

		public void TransformMultiply (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformMultiply (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformPremultiply (IntPtr handle, float* dst, float* src);

		public void TransformPremultiply (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformPremultiply (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_TransformInverse (IntPtr handle, float* dst, float* src);

		public int TransformInverse (float* dst, float* src)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_TransformInverse (handle, dst, src);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TransformPoint (IntPtr handle, float* dstx, float* dsty, float* xform, float srcx, float srcy);

		public void TransformPoint (float* dstx, float* dsty, float* xform, float srcx, float srcy)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TransformPoint (handle, dstx, dsty, xform, srcx, srcy);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGElement_DegToRad (IntPtr handle, float deg);

		public float DegToRad (float deg)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_DegToRad (handle, deg);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGElement_RadToDeg (IntPtr handle, float rad);

		public float RadToDeg (float rad)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_RadToDeg (handle, rad);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_CreateImageMem (IntPtr handle, int imageFlags, byte* data, int ndata);

		public int CreateImageMem (int imageFlags, byte* data, int ndata)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_CreateImageMem (handle, imageFlags, data, ndata);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_CreateImageRGBA (IntPtr handle, int w, int h, int imageFlags, byte* data);

		public int CreateImageRGBA (int w, int h, int imageFlags, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_CreateImageRGBA (handle, w, h, imageFlags, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_UpdateImage (IntPtr handle, int image, byte* data);

		public void UpdateImage (int image, byte* data)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_UpdateImage (handle, image, data);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ImageSize (IntPtr handle, int image, int* w, int* h);

		public void ImageSize (int image, int* w, int* h)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ImageSize (handle, image, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_DeleteImage (IntPtr handle, int image);

		public void DeleteImage (int image)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_DeleteImage (handle, image);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGElement_LinearGradient (IntPtr handle, float sx, float sy, float ex, float ey, NVGcolor icol, NVGcolor ocol);

		public NVGpaint LinearGradient (float sx, float sy, float ex, float ey, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_LinearGradient
#else
VGElement_LinearGradient
#endif
 (handle, sx, sy, ex, ey, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGElement_BoxGradient (IntPtr handle, float x, float y, float w, float h, float r, float f, NVGcolor icol, NVGcolor ocol);

		public NVGpaint BoxGradient (float x, float y, float w, float h, float r, float f, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_BoxGradient
#else
VGElement_BoxGradient
#endif
 (handle, x, y, w, h, r, f, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGElement_RadialGradient (IntPtr handle, float cx, float cy, float inr, float outr, NVGcolor icol, NVGcolor ocol);

		public NVGpaint RadialGradient (float cx, float cy, float inr, float outr, NVGcolor icol, NVGcolor ocol)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_RadialGradient
#else
VGElement_RadialGradient
#endif
 (handle, cx, cy, inr, outr, icol, ocol);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
NVGpaint *
#else
NVGpaint
#endif
 VGElement_ImagePattern (IntPtr handle, float ox, float oy, float ex, float ey, float angle, int image, float alpha);

		public NVGpaint ImagePattern (float ox, float oy, float ex, float ey, float angle, int image, float alpha)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*VGElement_ImagePattern
#else
VGElement_ImagePattern
#endif
 (handle, ox, oy, ex, ey, angle, image, alpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Scissor (IntPtr handle, float x, float y, float w, float h);

		public void Scissor (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Scissor (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_IntersectScissor (IntPtr handle, float x, float y, float w, float h);

		public void IntersectScissor (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_IntersectScissor (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ResetScissor (IntPtr handle);

		public void ResetScissor ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ResetScissor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_BeginPath (IntPtr handle);

		public void BeginPath ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_BeginPath (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_MoveTo (IntPtr handle, float x, float y);

		public void MoveTo (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_MoveTo (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_LineTo (IntPtr handle, float x, float y);

		public void LineTo (float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_LineTo (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_BezierTo (IntPtr handle, float c1x, float c1y, float c2x, float c2y, float x, float y);

		public void BezierTo (float c1x, float c1y, float c2x, float c2y, float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_BezierTo (handle, c1x, c1y, c2x, c2y, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_QuadTo (IntPtr handle, float cx, float cy, float x, float y);

		public void QuadTo (float cx, float cy, float x, float y)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_QuadTo (handle, cx, cy, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ArcTo (IntPtr handle, float x1, float y1, float x2, float y2, float radius);

		public void ArcTo (float x1, float y1, float x2, float y2, float radius)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ArcTo (handle, x1, y1, x2, y2, radius);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ClosePath (IntPtr handle);

		public void ClosePath ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ClosePath (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_PathWinding (IntPtr handle, int dir);

		public void PathWinding (int dir)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_PathWinding (handle, dir);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Arc (IntPtr handle, float cx, float cy, float r, float a0, float a1, int dir);

		public void Arc (float cx, float cy, float r, float a0, float a1, int dir)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Arc (handle, cx, cy, r, a0, a1, dir);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Rect (IntPtr handle, float x, float y, float w, float h);

		public void Rect (float x, float y, float w, float h)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Rect (handle, x, y, w, h);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_RoundedRect (IntPtr handle, float x, float y, float w, float h, float r);

		public void RoundedRect (float x, float y, float w, float h, float r)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_RoundedRect (handle, x, y, w, h, r);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_RoundedRectVarying (IntPtr handle, float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft);

		public void RoundedRectVarying (float x, float y, float w, float h, float radTopLeft, float radTopRight, float radBottomRight, float radBottomLeft)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_RoundedRectVarying (handle, x, y, w, h, radTopLeft, radTopRight, radBottomRight, radBottomLeft);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Ellipse (IntPtr handle, float cx, float cy, float rx, float ry);

		public void Ellipse (float cx, float cy, float rx, float ry)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Ellipse (handle, cx, cy, rx, ry);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Circle (IntPtr handle, float cx, float cy, float r);

		public void Circle (float cx, float cy, float r)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Circle (handle, cx, cy, r);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Fill (IntPtr handle);

		public void Fill ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Fill (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_Stroke (IntPtr handle);

		public void Stroke ()
		{
			Runtime.ValidateRefCounted (this);
			VGElement_Stroke (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_AddFallbackFontId (IntPtr handle, int baseFont, int fallbackFont);

		public int AddFallbackFontId (int baseFont, int fallbackFont)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_AddFallbackFontId (handle, baseFont, fallbackFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_ResetFallbackFontsId (IntPtr handle, int baseFont);

		public void ResetFallbackFontsId (int baseFont)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_ResetFallbackFontsId (handle, baseFont);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FontSize (IntPtr handle, float size);

		public void FontSize (float size)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FontSize (handle, size);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FontBlur (IntPtr handle, float blur);

		public void FontBlur (float blur)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FontBlur (handle, blur);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextLetterSpacing (IntPtr handle, float spacing);

		public void TextLetterSpacing (float spacing)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextLetterSpacing (handle, spacing);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextLineHeight (IntPtr handle, float lineHeight);

		public void TextLineHeight (float lineHeight)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextLineHeight (handle, lineHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextAlign (IntPtr handle, int align);

		public void TextAlign (int align)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextAlign (handle, align);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FontFaceId (IntPtr handle, int font);

		public void FontFaceId (int font)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FontFaceId (handle, font);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextMetrics (IntPtr handle, float* ascender, float* descender, float* lineh);

		public void TextMetrics (float* ascender, float* descender, float* lineh)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextMetrics (handle, ascender, descender, lineh);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_FontFace (IntPtr handle, string font);

		public void FontFace (string font)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_FontFace (handle, font);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGElement_Text (IntPtr handle, float x, float y, string str);

		public float Text (float x, float y, string str)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_Text (handle, x, y, str);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextBox (IntPtr handle, float x, float y, float breakRowWidth, string str);

		public void TextBox (float x, float y, float breakRowWidth, string str)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextBox (handle, x, y, breakRowWidth, str);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint VGElement_TextBreakLines (IntPtr handle, string str, float breakRowWidth, IntPtr vgTextRowBuffer);

		public uint TextBreakLines (string str, float breakRowWidth, VGTextRowBuffer vgTextRowBuffer)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_TextBreakLines (handle, str, breakRowWidth, (object)vgTextRowBuffer == null ? IntPtr.Zero : vgTextRowBuffer.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float VGElement_TextBounds (IntPtr handle, float x, float y, string str, float* bounds);

		public float TextBounds (float x, float y, string str, float* bounds)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_TextBounds (handle, x, y, str, bounds);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void VGElement_TextBoxBounds (IntPtr handle, float x, float y, float breakRowWidth, string str, float* bounds);

		public void TextBoxBounds (float x, float y, float breakRowWidth, string str, float* bounds)
		{
			Runtime.ValidateRefCounted (this);
			VGElement_TextBoxBounds (handle, x, y, breakRowWidth, str, bounds);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int VGElement_TextGlyphPositions (IntPtr handle, float x, float y, string str, float* positions, int maxPositions);

		public int TextGlyphPositions (float x, float y, string str, float* positions, int maxPositions)
		{
			Runtime.ValidateRefCounted (this);
			return VGElement_TextGlyphPositions (handle, x, y, str, positions, maxPositions);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		public Texture2D RenderTarget {
			get {
				return GetRenderTarget ();
			}
		}

		public override Urho.IntVector2 Size {
			get {
				return GetSize ();
			}
		}

		public Color ClearColor {
			get {
				return GetClearColor ();
			}
			set {
				SetClearColor (value);
			}
		}
	}
}
