// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// RaycastVehicle.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Physics
{
	/// <summary>
	/// Construct.
	/// </summary>
	public unsafe partial class RaycastVehicle : LogicComponent
	{
		unsafe partial void OnRaycastVehicleCreated ();

		[Preserve]
		public RaycastVehicle (IntPtr handle) : base (handle)
		{
			OnRaycastVehicleCreated ();
		}

		[Preserve]
		protected RaycastVehicle (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnRaycastVehicleCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int RaycastVehicle_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (RaycastVehicle_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr RaycastVehicle_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (RaycastVehicle_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int RaycastVehicle_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(RaycastVehicle));
			return new StringHash (RaycastVehicle_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr RaycastVehicle_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(RaycastVehicle));
			return Marshal.PtrToStringAnsi (RaycastVehicle_GetTypeNameStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory and attributes.
		/// 
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(RaycastVehicle));
			RaycastVehicle_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_OnSetEnabled (IntPtr handle);

		/// <summary>
		/// Handle enabled/disabled state change.
		/// </summary>
		public override void OnSetEnabled ()
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_OnSetEnabled (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_ApplyAttributes (IntPtr handle);

		/// <summary>
		/// Perform post-load after deserialization. Acquire the components from the scene nodes.
		/// </summary>
		public override void ApplyAttributes ()
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_ApplyAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_AddWheel (IntPtr handle, IntPtr wheelNode, Vector3 wheelDirection, Vector3 wheelAxle, float restLength, float wheelRadius, bool frontWheel);

		/// <summary>
		/// Add a wheel. All parameters are relative to RigidBody / node.
		/// </summary>
		public void AddWheel (Node wheelNode, Vector3 wheelDirection, Vector3 wheelAxle, float restLength, float wheelRadius, bool frontWheel)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_AddWheel (handle, (object)wheelNode == null ? IntPtr.Zero : wheelNode.Handle, wheelDirection, wheelAxle, restLength, wheelRadius, frontWheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_ResetSuspension (IntPtr handle);

		/// <summary>
		/// Reset all suspension.
		/// </summary>
		public void ResetSuspension ()
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_ResetSuspension (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_UpdateWheelTransform (IntPtr handle, int wheel, bool interpolated);

		/// <summary>
		/// Update transform for particular wheel.
		/// </summary>
		public void UpdateWheelTransform (int wheel, bool interpolated)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_UpdateWheelTransform (handle, wheel, interpolated);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetSteeringValue (IntPtr handle, int wheel, float steeringValue);

		/// <summary>
		/// Set steering value of particular wheel.
		/// </summary>
		public void SetSteeringValue (int wheel, float steeringValue)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetSteeringValue (handle, wheel, steeringValue);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelSuspensionStiffness (IntPtr handle, int wheel, float stiffness);

		/// <summary>
		/// Set suspension stiffness for particular wheel.
		/// </summary>
		public void SetWheelSuspensionStiffness (int wheel, float stiffness)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelSuspensionStiffness (handle, wheel, stiffness);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelMaxSuspensionForce (IntPtr handle, int wheel, float force);

		/// <summary>
		/// Set wheel max suspension force. Good results are often obtained by a value that is about 3x to 4x the vehicle weight.
		/// </summary>
		public void SetWheelMaxSuspensionForce (int wheel, float force)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelMaxSuspensionForce (handle, wheel, force);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelDampingRelaxation (IntPtr handle, int wheel, float damping);

		/// <summary>
		/// Set wheel damping relaxation.
		/// </summary>
		public void SetWheelDampingRelaxation (int wheel, float damping)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelDampingRelaxation (handle, wheel, damping);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelDampingCompression (IntPtr handle, int wheel, float compression);

		/// <summary>
		/// Set wheel damping compression.
		/// </summary>
		public void SetWheelDampingCompression (int wheel, float compression)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelDampingCompression (handle, wheel, compression);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelFrictionSlip (IntPtr handle, int wheel, float slip);

		/// <summary>
		/// Set wheel friction slip.
		/// </summary>
		public void SetWheelFrictionSlip (int wheel, float slip)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelFrictionSlip (handle, wheel, slip);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelRollInfluence (IntPtr handle, int wheel, float rollInfluence);

		/// <summary>
		/// Set wheel roll influence.
		/// </summary>
		public void SetWheelRollInfluence (int wheel, float rollInfluence)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelRollInfluence (handle, wheel, rollInfluence);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetEngineForce (IntPtr handle, int wheel, float force);

		/// <summary>
		/// Set engine force for the wheel.
		/// </summary>
		public void SetEngineForce (int wheel, float force)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetEngineForce (handle, wheel, force);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetBrake (IntPtr handle, int wheel, float force);

		/// <summary>
		/// Set hand brake (wheel rotation blocking force).
		/// </summary>
		public void SetBrake (int wheel, float force)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetBrake (handle, wheel, force);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelRadius (IntPtr handle, int wheel, float wheelRadius);

		/// <summary>
		/// Set wheel radius.
		/// </summary>
		public void SetWheelRadius (int wheel, float wheelRadius)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelRadius (handle, wheel, wheelRadius);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_ResetWheels (IntPtr handle);

		/// <summary>
		/// Sets node initial positions.
		/// </summary>
		public void ResetWheels ()
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_ResetWheels (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelSkidInfo (IntPtr handle, int wheel, float factor);

		/// <summary>
		/// Set sliding factor 0
		/// <
		/// = x
		/// <
		/// = 1. The less the value, more sliding.
		/// </summary>
		public void SetWheelSkidInfo (int wheel, float factor)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelSkidInfo (handle, wheel, factor);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool RaycastVehicle_WheelIsGrounded (IntPtr handle, int wheel);

		/// <summary>
		/// True if wheel touches ground (raycast hits something).
		/// </summary>
		public bool WheelIsGrounded (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_WheelIsGrounded (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetMaxSuspensionTravel (IntPtr handle, int wheel, float maxSuspensionTravel);

		/// <summary>
		/// Set maximum suspension travel value.
		/// </summary>
		public void SetMaxSuspensionTravel (int wheel, float maxSuspensionTravel)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetMaxSuspensionTravel (handle, wheel, maxSuspensionTravel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelDirection (IntPtr handle, int wheel, Vector3 direction);

		/// <summary>
		/// Set wheel direction vector.
		/// </summary>
		public void SetWheelDirection (int wheel, Vector3 direction)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelDirection (handle, wheel, direction);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelAxle (IntPtr handle, int wheel, Vector3 axle);

		/// <summary>
		/// Set wheel axle vector.
		/// </summary>
		public void SetWheelAxle (int wheel, Vector3 axle)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelAxle (handle, wheel, axle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetMaxSideSlipSpeed (IntPtr handle, float speed);

		/// <summary>
		/// Set side speed which is considered sliding.
		/// 
		/// </summary>
		private void SetMaxSideSlipSpeed (float speed)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetMaxSideSlipSpeed (handle, speed);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelSkidInfoCumulative (IntPtr handle, int wheel, float skid);

		/// <summary>
		/// Set cumulative skid info.
		/// </summary>
		public void SetWheelSkidInfoCumulative (int wheel, float skid)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelSkidInfoCumulative (handle, wheel, skid);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetInAirRPM (IntPtr handle, float rpm);

		/// <summary>
		/// Set revolution per minute value for when wheel doesn't touch ground. If set to 0 (or not set), calculated from engine force (probably not what you want).
		/// 
		/// </summary>
		private void SetInAirRPM (float rpm)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetInAirRPM (handle, rpm);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_Init (IntPtr handle);

		/// <summary>
		/// Init the vehicle component after creation.
		/// </summary>
		public void Init ()
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_Init (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_FixedUpdate (IntPtr handle, float timeStep);

		/// <summary>
		/// Perform fixed step pre-update.
		/// </summary>
		public override void FixedUpdate (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_FixedUpdate (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_FixedPostUpdate (IntPtr handle, float timeStep);

		/// <summary>
		/// Perform fixed step post-update.
		/// </summary>
		public override void FixedPostUpdate (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_FixedPostUpdate (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_PostUpdate (IntPtr handle, float timeStep);

		/// <summary>
		/// Perform variable step post-update.
		/// </summary>
		public override void PostUpdate (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_PostUpdate (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetWheelPosition (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel position relative to RigidBody.
		/// </summary>
		public Vector3 GetWheelPosition (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetWheelPosition
#else
RaycastVehicle_GetWheelPosition
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Quaternion *
#else
Quaternion
#endif
 RaycastVehicle_GetWheelRotation (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel rotation relative to RigidBody.
		/// </summary>
		public Quaternion GetWheelRotation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetWheelRotation
#else
RaycastVehicle_GetWheelRotation
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetWheelConnectionPoint (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel connection point relative to RigidBody.
		/// </summary>
		public Vector3 GetWheelConnectionPoint (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetWheelConnectionPoint
#else
RaycastVehicle_GetWheelConnectionPoint
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int RaycastVehicle_GetNumWheels (IntPtr handle);

		/// <summary>
		/// Get number of attached wheels.
		/// 
		/// </summary>
		private int GetNumWheels ()
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetNumWheels (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr RaycastVehicle_GetWheelNode (IntPtr handle, int wheel);

		/// <summary>
		/// Get node of the wheel.
		/// </summary>
		public Node GetWheelNode (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<Node> (RaycastVehicle_GetWheelNode (handle, wheel));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetSteeringValue (IntPtr handle, int wheel);

		/// <summary>
		/// Get steering value of particular wheel.
		/// </summary>
		public float GetSteeringValue (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetSteeringValue (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelSuspensionStiffness (IntPtr handle, int wheel);

		/// <summary>
		/// Get suspension stiffness for particular wheel.
		/// </summary>
		public float GetWheelSuspensionStiffness (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelSuspensionStiffness (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelMaxSuspensionForce (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel max suspension force.
		/// </summary>
		public float GetWheelMaxSuspensionForce (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelMaxSuspensionForce (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelDampingRelaxation (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel damping relaxation.
		/// </summary>
		public float GetWheelDampingRelaxation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelDampingRelaxation (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelDampingCompression (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel damping compression.
		/// </summary>
		public float GetWheelDampingCompression (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelDampingCompression (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelFrictionSlip (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel friction slip.
		/// </summary>
		public float GetWheelFrictionSlip (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelFrictionSlip (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelRollInfluence (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel roll influence.
		/// </summary>
		public float GetWheelRollInfluence (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelRollInfluence (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetEngineForce (IntPtr handle, int wheel);

		/// <summary>
		/// Get engine force for the wheel.
		/// </summary>
		public float GetEngineForce (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetEngineForce (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetBrake (IntPtr handle, int wheel);

		/// <summary>
		/// Get hand brake value.
		/// </summary>
		public float GetBrake (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetBrake (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelRadius (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel radius.
		/// </summary>
		public float GetWheelRadius (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelRadius (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void RaycastVehicle_SetWheelRestLength (IntPtr handle, int wheel, float length);

		/// <summary>
		/// Get wheel rest length.
		/// </summary>
		public void SetWheelRestLength (int wheel, float length)
		{
			Runtime.ValidateRefCounted (this);
			RaycastVehicle_SetWheelRestLength (handle, wheel, length);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelRestLength (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel rest length.
		/// </summary>
		public float GetWheelRestLength (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelRestLength (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetMaxSuspensionTravel (IntPtr handle, int wheel);

		/// <summary>
		/// Get maximum suspension travel value.
		/// </summary>
		public float GetMaxSuspensionTravel (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetMaxSuspensionTravel (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetWheelAxle (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel axle vector.
		/// </summary>
		public Vector3 GetWheelAxle (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetWheelAxle
#else
RaycastVehicle_GetWheelAxle
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelSideSlipSpeed (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel slide speed.
		/// </summary>
		public float GetWheelSideSlipSpeed (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelSideSlipSpeed (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetMaxSideSlipSpeed (IntPtr handle);

		/// <summary>
		/// Get side speed which is considered sliding.
		/// 
		/// </summary>
		private float GetMaxSideSlipSpeed ()
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetMaxSideSlipSpeed (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelSkidInfo (IntPtr handle, int wheel);

		/// <summary>
		/// Sliding factor 0
		/// <
		/// = x
		/// <
		/// = 1.
		/// </summary>
		public float GetWheelSkidInfo (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelSkidInfo (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetWheelDirection (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel direction vector.
		/// </summary>
		public Vector3 GetWheelDirection (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetWheelDirection
#else
RaycastVehicle_GetWheelDirection
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetWheelSkidInfoCumulative (IntPtr handle, int wheel);

		/// <summary>
		/// Get cumulative skid info.
		/// </summary>
		public float GetWheelSkidInfoCumulative (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetWheelSkidInfoCumulative (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool RaycastVehicle_IsFrontWheel (IntPtr handle, int wheel);

		/// <summary>
		/// True if front wheel, otherwise false.
		/// </summary>
		public bool IsFrontWheel (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_IsFrontWheel (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetContactPosition (IntPtr handle, int wheel);

		/// <summary>
		/// Get wheel contact position.
		/// </summary>
		public Vector3 GetContactPosition (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetContactPosition
#else
RaycastVehicle_GetContactPosition
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 RaycastVehicle_GetContactNormal (IntPtr handle, int wheel);

		/// <summary>
		/// Get contact normal.
		/// </summary>
		public Vector3 GetContactNormal (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*RaycastVehicle_GetContactNormal
#else
RaycastVehicle_GetContactNormal
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float RaycastVehicle_GetInAirRPM (IntPtr handle);

		/// <summary>
		/// Get revolution per minute value for when wheel doesn't touch ground.
		/// 
		/// </summary>
		private float GetInAirRPM ()
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetInAirRPM (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntVector3 RaycastVehicle_GetCoordinateSystem (IntPtr handle);

		/// <summary>
		/// Get the coordinate system.
		/// 
		/// </summary>
		private IntVector3 GetCoordinateSystem ()
		{
			Runtime.ValidateRefCounted (this);
			return RaycastVehicle_GetCoordinateSystem (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Get side speed which is considered sliding.
		/// 
		/// Or
		/// Set side speed which is considered sliding.
		/// 
		/// </summary>
		public float MaxSideSlipSpeed {
			get {
				return GetMaxSideSlipSpeed ();
			}
			set {
				SetMaxSideSlipSpeed (value);
			}
		}

		/// <summary>
		/// Get revolution per minute value for when wheel doesn't touch ground.
		/// 
		/// Or
		/// Set revolution per minute value for when wheel doesn't touch ground. If set to 0 (or not set), calculated from engine force (probably not what you want).
		/// 
		/// </summary>
		public float InAirRPM {
			get {
				return GetInAirRPM ();
			}
			set {
				SetInAirRPM (value);
			}
		}

		/// <summary>
		/// Get the coordinate system.
		/// 
		/// </summary>
		public IntVector3 CoordinateSystem {
			get {
				return GetCoordinateSystem ();
			}
		}

		/// <summary>
		/// Get number of attached wheels.
		/// 
		/// </summary>
		public int NumWheels {
			get {
				return GetNumWheels ();
			}
		}
	}
}
