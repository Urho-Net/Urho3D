// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Automation.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho
{
	public unsafe partial class Automation : UrhoObject
	{
		unsafe partial void OnAutomationCreated ();

		[Preserve]
		public Automation (IntPtr handle) : base (handle)
		{
			OnAutomationCreated ();
		}

		[Preserve]
		protected Automation (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnAutomationCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Automation_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (Automation_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Automation_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (Automation_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int Automation_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Automation));
			return new StringHash (Automation_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Automation_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Automation));
			return Marshal.PtrToStringAnsi (Automation_GetTypeNameStatic ());
		}

		[Preserve]
		public Automation () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr Automation_Automation (IntPtr context);

		[Preserve]
		public Automation (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Automation));
			handle = Automation_Automation ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnAutomationCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Automation_IsAvaliable (IntPtr handle);

		private bool IsAvaliable ()
		{
			Runtime.ValidateRefCounted (this);
			return Automation_IsAvaliable (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseClick (IntPtr handle, MouseButton button);

		public void MouseClick (MouseButton button)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseClick (handle, button);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MousePress (IntPtr handle, MouseButton button);

		public void MousePress (MouseButton button)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MousePress (handle, button);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseRelease (IntPtr handle, MouseButton button);

		public void MouseRelease (MouseButton button)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseRelease (handle, button);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseScrollH (IntPtr handle, int amount);

		public void MouseScrollH (int amount)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseScrollH (handle, amount);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseScrollV (IntPtr handle, int amount);

		public void MouseScrollV (int amount)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseScrollV (handle, amount);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.IntVector2 *
#else
Urho.IntVector2
#endif
 Automation_MouseGetPos (IntPtr handle);

		public Urho.IntVector2 MouseGetPos ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*Automation_MouseGetPos
#else
Automation_MouseGetPos
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseSetPos (IntPtr handle, ref Urho.IntVector2 point);

		public void MouseSetPos (Urho.IntVector2 point)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseSetPos (handle, ref point);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_MouseSetPos0 (IntPtr handle, uint x, uint y);

		public void MouseSetPos (uint x, uint y)
		{
			Runtime.ValidateRefCounted (this);
			Automation_MouseSetPos0 (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Automation_MouseGetState (IntPtr handle, MouseButton button);

		public bool MouseGetState (MouseButton button)
		{
			Runtime.ValidateRefCounted (this);
			return Automation_MouseGetState (handle, button);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_KeyboardClick (IntPtr handle, int keycode);

		public void KeyboardClick (int keycode)
		{
			Runtime.ValidateRefCounted (this);
			Automation_KeyboardClick (handle, keycode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_KeyboardPress (IntPtr handle, int keycode);

		public void KeyboardPress (int keycode)
		{
			Runtime.ValidateRefCounted (this);
			Automation_KeyboardPress (handle, keycode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void Automation_KeyboardRelease (IntPtr handle, int keycode);

		public void KeyboardRelease (int keycode)
		{
			Runtime.ValidateRefCounted (this);
			Automation_KeyboardRelease (handle, keycode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool Automation_KeyboardGetState (IntPtr handle, int keycode);

		public bool KeyboardGetState (int keycode)
		{
			Runtime.ValidateRefCounted (this);
			return Automation_KeyboardGetState (handle, keycode);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
IntRect *
#else
IntRect
#endif
 Automation_GetScreenBounds (IntPtr handle);

		private IntRect GetScreenBounds ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*Automation_GetScreenBounds
#else
Automation_GetScreenBounds
#endif
 (handle);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		public bool Avaliable {
			get {
				return IsAvaliable ();
			}
		}

		public IntRect ScreenBounds {
			get {
				return GetScreenBounds ();
			}
		}
	}
}
