// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// CustomRaycastVehicle.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Physics
{
	/// <summary>
	/// Create the rigid body, or re-add to the physics world with changed flags. Calls UpdateMass().
	/// </summary>
	public unsafe partial class CustomRaycastVehicle : RigidBody
	{
		unsafe partial void OnCustomRaycastVehicleCreated ();

		[Preserve]
		public CustomRaycastVehicle (IntPtr handle) : base (handle)
		{
			OnCustomRaycastVehicleCreated ();
		}

		[Preserve]
		protected CustomRaycastVehicle (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnCustomRaycastVehicleCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int CustomRaycastVehicle_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (CustomRaycastVehicle_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr CustomRaycastVehicle_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (CustomRaycastVehicle_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int CustomRaycastVehicle_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(CustomRaycastVehicle));
			return new StringHash (CustomRaycastVehicle_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr CustomRaycastVehicle_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(CustomRaycastVehicle));
			return Marshal.PtrToStringAnsi (CustomRaycastVehicle_GetTypeNameStatic ());
		}

		[Preserve]
		public CustomRaycastVehicle () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr CustomRaycastVehicle_CustomRaycastVehicle (IntPtr context);

		[Preserve]
		public CustomRaycastVehicle (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(CustomRaycastVehicle));
			handle = CustomRaycastVehicle_CustomRaycastVehicle ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnCustomRaycastVehicleCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_RegisterObject (IntPtr context);

		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(CustomRaycastVehicle));
			CustomRaycastVehicle_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_ResetSuspension (IntPtr handle);

		public void ResetSuspension ()
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_ResetSuspension (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetVehicleCenterOfMass (IntPtr handle, ref Urho.Vector3 centerOfMass);

		public void SetVehicleCenterOfMass (Urho.Vector3 centerOfMass)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetVehicleCenterOfMass (handle, ref centerOfMass);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetVehicleCenterOfMass (IntPtr handle);

		private Vector3 GetVehicleCenterOfMass ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetVehicleCenterOfMass
#else
CustomRaycastVehicle_GetVehicleCenterOfMass
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetSteeringValue (IntPtr handle, int wheel);

		public float GetSteeringValue (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetSteeringValue (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetSteeringValue (IntPtr handle, float steering, int wheel);

		public void SetSteeringValue (float steering, int wheel)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetSteeringValue (handle, steering, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_ApplyEngineForce (IntPtr handle, float force, int wheel);

		public void ApplyEngineForce (float force, int wheel)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_ApplyEngineForce (handle, force, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetBrake (IntPtr handle, float brake, int wheel);

		public void SetBrake (float brake, int wheel)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetBrake (handle, brake, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetWheelPositionWS (IntPtr handle, int wheel);

		public Vector3 GetWheelPositionWS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetWheelPositionWS
#else
CustomRaycastVehicle_GetWheelPositionWS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetWheelPositionLS (IntPtr handle, int wheel);

		public Vector3 GetWheelPositionLS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetWheelPositionLS
#else
CustomRaycastVehicle_GetWheelPositionLS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Quaternion *
#else
Quaternion
#endif
 CustomRaycastVehicle_GetWheelRotation (IntPtr handle, int wheel);

		public Quaternion GetWheelRotation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetWheelRotation
#else
CustomRaycastVehicle_GetWheelRotation
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_UpdateWheelTransform (IntPtr handle, int wheel, bool interpolatedTransform);

		public void UpdateWheelTransform (int wheel, bool interpolatedTransform = true)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_UpdateWheelTransform (handle, wheel, interpolatedTransform);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_AddWheel (IntPtr handle, ref Urho.Vector3 connectionPointCS0, ref Urho.Vector3 wheelDirectionCS0, ref Urho.Vector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, bool isFrontWheel);

		public void AddWheel (Urho.Vector3 connectionPointCS0, Urho.Vector3 wheelDirectionCS0, Urho.Vector3 wheelAxleCS, float suspensionRestLength, float wheelRadius, bool isFrontWheel)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_AddWheel (handle, ref connectionPointCS0, ref wheelDirectionCS0, ref wheelAxleCS, suspensionRestLength, wheelRadius, isFrontWheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int CustomRaycastVehicle_GetNumWheels (IntPtr handle);

		private int GetNumWheels ()
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetNumWheels (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetForwardVector (IntPtr handle);

		private Vector3 GetForwardVector ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetForwardVector
#else
CustomRaycastVehicle_GetForwardVector
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetCurrentSpeedKmHour (IntPtr handle);

		private float GetCurrentSpeedKmHour ()
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetCurrentSpeedKmHour (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetCompoundLocalExtents (IntPtr handle);

		private Vector3 GetCompoundLocalExtents ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetCompoundLocalExtents
#else
CustomRaycastVehicle_GetCompoundLocalExtents
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetCompooundLocalExtentsCenter (IntPtr handle);

		private Vector3 GetCompooundLocalExtentsCenter ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetCompooundLocalExtentsCenter
#else
CustomRaycastVehicle_GetCompooundLocalExtentsCenter
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetCompoundLocalAabbMin (IntPtr handle);

		private Vector3 GetCompoundLocalAabbMin ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetCompoundLocalAabbMin
#else
CustomRaycastVehicle_GetCompoundLocalAabbMin
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetCompoundLocalAabbMax (IntPtr handle);

		private Vector3 GetCompoundLocalAabbMax ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetCompoundLocalAabbMax
#else
CustomRaycastVehicle_GetCompoundLocalAabbMax
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_CompoundScaleLocalAabbMin (IntPtr handle, ref Urho.Vector3 scale);

		public void CompoundScaleLocalAabbMin (Urho.Vector3 scale)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_CompoundScaleLocalAabbMin (handle, ref scale);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_CompoundScaleLocalAabbMax (IntPtr handle, ref Urho.Vector3 scale);

		public void CompoundScaleLocalAabbMax (Urho.Vector3 scale)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_CompoundScaleLocalAabbMax (handle, ref scale);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetWheelSuspensionStiffness (IntPtr handle, int wheel, float stiffness);

		public void SetWheelSuspensionStiffness (int wheel, float stiffness)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetWheelSuspensionStiffness (handle, wheel, stiffness);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelSuspensionStiffness (IntPtr handle, int wheel);

		public float GetWheelSuspensionStiffness (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelSuspensionStiffness (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetWheelDampingRelaxation (IntPtr handle, int wheel, float damping);

		public void SetWheelDampingRelaxation (int wheel, float damping)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetWheelDampingRelaxation (handle, wheel, damping);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelDampingRelaxation (IntPtr handle, int wheel);

		public float GetWheelDampingRelaxation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelDampingRelaxation (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetWheelDampingCompression (IntPtr handle, int wheel, float compression);

		public void SetWheelDampingCompression (int wheel, float compression)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetWheelDampingCompression (handle, wheel, compression);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelDampingCompression (IntPtr handle, int wheel);

		public float GetWheelDampingCompression (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelDampingCompression (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetWheelFrictionSlip (IntPtr handle, int wheel, float slip);

		public void SetWheelFrictionSlip (int wheel, float slip)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetWheelFrictionSlip (handle, wheel, slip);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelFrictionSlip (IntPtr handle, int wheel);

		public float GetWheelFrictionSlip (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelFrictionSlip (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetWheelRollInfluence (IntPtr handle, int wheel, float rollInfluence);

		public void SetWheelRollInfluence (int wheel, float rollInfluence)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetWheelRollInfluence (handle, wheel, rollInfluence);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelRollInfluence (IntPtr handle, int wheel);

		public float GetWheelRollInfluence (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelRollInfluence (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetSideFrictionStiffness (IntPtr handle, int wheel, float Stiffness);

		public void SetSideFrictionStiffness (int wheel, float Stiffness)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetSideFrictionStiffness (handle, wheel, Stiffness);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetSideFrictionStiffness (IntPtr handle, int wheel);

		public float GetSideFrictionStiffness (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetSideFrictionStiffness (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetChassisConnectionPointCS (IntPtr handle, int wheel);

		public Vector3 GetChassisConnectionPointCS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetChassisConnectionPointCS
#else
CustomRaycastVehicle_GetChassisConnectionPointCS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool CustomRaycastVehicle_IsWheelInContact (IntPtr handle, int wheel);

		public bool IsWheelInContact (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_IsWheelInContact (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetContactPointWS (IntPtr handle, int wheel);

		public Vector3 GetContactPointWS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetContactPointWS
#else
CustomRaycastVehicle_GetContactPointWS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetContactNormalWS (IntPtr handle, int wheel);

		public Vector3 GetContactNormalWS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetContactNormalWS
#else
CustomRaycastVehicle_GetContactNormalWS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetSkidInfoCumulative (IntPtr handle, int wheel, float skid);

		public void SetSkidInfoCumulative (int wheel, float skid)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetSkidInfoCumulative (handle, wheel, skid);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetSkidInfoCumulative (IntPtr handle, int wheel);

		public float GetSkidInfoCumulative (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetSkidInfoCumulative (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetWheelsRadius (IntPtr handle, int wheel);

		public float GetWheelsRadius (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetWheelsRadius (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetSkidInfo (IntPtr handle, int wheel, float skid);

		public void SetSkidInfo (int wheel, float skid)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetSkidInfo (handle, wheel, skid);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetSkidInfo (IntPtr handle, int wheel);

		public float GetSkidInfo (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetSkidInfo (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetDeltaRotation (IntPtr handle, int wheel, float rotation);

		public void SetDeltaRotation (int wheel, float rotation)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetDeltaRotation (handle, wheel, rotation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetDeltaRotation (IntPtr handle, int wheel);

		public float GetDeltaRotation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetDeltaRotation (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetRotation (IntPtr handle, int wheel, float rotation);

		public void SetRotation (int wheel, float rotation)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetRotation (handle, wheel, rotation);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetRotation (IntPtr handle, int wheel);

		public float GetRotation (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetRotation (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Vector3 *
#else
Vector3
#endif
 CustomRaycastVehicle_GetWheelAxleWS (IntPtr handle, int wheel);

		public Vector3 GetWheelAxleWS (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*CustomRaycastVehicle_GetWheelAxleWS
#else
CustomRaycastVehicle_GetWheelAxleWS
#endif
 (handle, wheel);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void CustomRaycastVehicle_SetRollInfluence (IntPtr handle, int wheel, float rollInfluence);

		public void SetRollInfluence (int wheel, float rollInfluence)
		{
			Runtime.ValidateRefCounted (this);
			CustomRaycastVehicle_SetRollInfluence (handle, wheel, rollInfluence);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float CustomRaycastVehicle_GetRollInfluence (IntPtr handle, int wheel);

		public float GetRollInfluence (int wheel)
		{
			Runtime.ValidateRefCounted (this);
			return CustomRaycastVehicle_GetRollInfluence (handle, wheel);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		public Vector3 VehicleCenterOfMass {
			get {
				return GetVehicleCenterOfMass ();
			}
		}

		public int NumWheels {
			get {
				return GetNumWheels ();
			}
		}

		public Vector3 ForwardVector {
			get {
				return GetForwardVector ();
			}
		}

		public float CurrentSpeedKmHour {
			get {
				return GetCurrentSpeedKmHour ();
			}
		}

		public Vector3 CompoundLocalExtents {
			get {
				return GetCompoundLocalExtents ();
			}
		}

		public Vector3 CompooundLocalExtentsCenter {
			get {
				return GetCompooundLocalExtentsCenter ();
			}
		}

		public Vector3 CompoundLocalAabbMin {
			get {
				return GetCompoundLocalAabbMin ();
			}
		}

		public Vector3 CompoundLocalAabbMax {
			get {
				return GetCompoundLocalAabbMax ();
			}
		}
	}
}
