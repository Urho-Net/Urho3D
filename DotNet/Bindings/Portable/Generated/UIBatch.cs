// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// UIBatch.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;
using ListView = Urho.Gui.ListView;
using Button = Urho.Gui.Button;

namespace Urho.Gui
{
	/// <summary>
	/// %UI rendering draw call.
	/// </summary>
	public unsafe partial class UIBatch
	{
		private IntPtr handle;

		public IntPtr Handle {
			get {
				return handle;
			}
		}

		unsafe partial void OnUIBatchCreated ();

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr UIBatch_UIBatch ();

		[Preserve]
		public UIBatch ()
		{
			Runtime.Validate (typeof(UIBatch));
			handle = UIBatch_UIBatch ();
			OnUIBatchCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_SetColor (IntPtr handle, ref Urho.Color color, bool overrideAlpha);

		/// <summary>
		/// Set new color for the batch. Overrides gradient.
		/// </summary>
		public void SetColor (Urho.Color color, bool overrideAlpha = false)
		{
			Runtime.ValidateObject (this);
			UIBatch_SetColor (handle, ref color, overrideAlpha);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_SetDefaultColor (IntPtr handle);

		/// <summary>
		/// Restore UI element's default color.
		/// </summary>
		public void SetDefaultColor ()
		{
			Runtime.ValidateObject (this);
			UIBatch_SetDefaultColor (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_AddQuad (IntPtr handle, float x, float y, float width, float height, int texOffsetX, int texOffsetY, int texWidth, int texHeight);

		/// <summary>
		/// Add a quad.
		/// </summary>
		public void AddQuad (float x, float y, float width, float height, int texOffsetX, int texOffsetY, int texWidth = 0, int texHeight = 0)
		{
			Runtime.ValidateObject (this);
			UIBatch_AddQuad (handle, x, y, width, height, texOffsetX, texOffsetY, texWidth, texHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_AddQuad0 (IntPtr handle, ref Urho.Matrix3x4 transform, int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth, int texHeight);

		/// <summary>
		/// Add a quad using a transform matrix.
		/// </summary>
		public void AddQuad (Urho.Matrix3x4 transform, int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth = 0, int texHeight = 0)
		{
			Runtime.ValidateObject (this);
			UIBatch_AddQuad0 (handle, ref transform, x, y, width, height, texOffsetX, texOffsetY, texWidth, texHeight);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_AddQuad1 (IntPtr handle, int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth, int texHeight, bool tiled);

		/// <summary>
		/// Add a quad with tiled texture.
		/// </summary>
		public void AddQuad (int x, int y, int width, int height, int texOffsetX, int texOffsetY, int texWidth, int texHeight, bool tiled)
		{
			Runtime.ValidateObject (this);
			UIBatch_AddQuad1 (handle, x, y, width, height, texOffsetX, texOffsetY, texWidth, texHeight, tiled);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_AddQuad2 (IntPtr handle, ref Urho.Matrix3x4 transform, ref Urho.IntVector2 a, ref Urho.IntVector2 b, ref Urho.IntVector2 c, ref Urho.IntVector2 d, ref Urho.IntVector2 texA, ref Urho.IntVector2 texB, ref Urho.IntVector2 texC, ref Urho.IntVector2 texD);

		/// <summary>
		/// Add a quad with freeform points and UVs. Uses the current color, not gradient. Points should be specified in clockwise order.
		/// </summary>
		public void AddQuad (Urho.Matrix3x4 transform, Urho.IntVector2 a, Urho.IntVector2 b, Urho.IntVector2 c, Urho.IntVector2 d, Urho.IntVector2 texA, Urho.IntVector2 texB, Urho.IntVector2 texC, Urho.IntVector2 texD)
		{
			Runtime.ValidateObject (this);
			UIBatch_AddQuad2 (handle, ref transform, ref a, ref b, ref c, ref d, ref texA, ref texB, ref texC, ref texD);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void UIBatch_AddQuad3 (IntPtr handle, ref Urho.Matrix3x4 transform, ref Urho.IntVector2 a, ref Urho.IntVector2 b, ref Urho.IntVector2 c, ref Urho.IntVector2 d, ref Urho.IntVector2 texA, ref Urho.IntVector2 texB, ref Urho.IntVector2 texC, ref Urho.IntVector2 texD, ref Urho.Color colA, ref Urho.Color colB, ref Urho.Color colC, ref Urho.Color colD);

		/// <summary>
		/// Add a quad with freeform points, UVs and colors. Points should be specified in clockwise order.
		/// </summary>
		public void AddQuad (Urho.Matrix3x4 transform, Urho.IntVector2 a, Urho.IntVector2 b, Urho.IntVector2 c, Urho.IntVector2 d, Urho.IntVector2 texA, Urho.IntVector2 texB, Urho.IntVector2 texC, Urho.IntVector2 texD, Urho.Color colA, Urho.Color colB, Urho.Color colC, Urho.Color colD)
		{
			Runtime.ValidateObject (this);
			UIBatch_AddQuad3 (handle, ref transform, ref a, ref b, ref c, ref d, ref texA, ref texB, ref texC, ref texD, ref colA, ref colB, ref colC, ref colD);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern uint UIBatch_GetInterpolatedColor (IntPtr handle, float x, float y);

		/// <summary>
		/// Return an interpolated color for the UI element.
		/// </summary>
		public uint GetInterpolatedColor (float x, float y)
		{
			Runtime.ValidateObject (this);
			return UIBatch_GetInterpolatedColor (handle, x, y);
		}
	}
}
