// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// ScrollView.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;
using File = Urho.IO.File;

namespace Urho.Gui
{
	/// <summary>
	/// Scrollable %UI element for showing a (possibly large) child element.
	/// </summary>
	public unsafe partial class ScrollView : UIElement
	{
		unsafe partial void OnScrollViewCreated ();

		[Preserve]
		public ScrollView (IntPtr handle) : base (handle)
		{
			OnScrollViewCreated ();
		}

		[Preserve]
		protected ScrollView (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			OnScrollViewCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ScrollView_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash (ScrollView_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi (ScrollView_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int ScrollView_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(ScrollView));
			return new StringHash (ScrollView_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(ScrollView));
			return Marshal.PtrToStringAnsi (ScrollView_GetTypeNameStatic ());
		}

		[Preserve]
		public ScrollView () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_ScrollView (IntPtr context);

		[Preserve]
		public ScrollView (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(ScrollView));
			handle = ScrollView_ScrollView ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			OnScrollViewCreated ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_RegisterObject (IntPtr context);

		/// <summary>
		/// Register object factory.
		/// 
		/// </summary>
		public new static void RegisterObject (Context context)
		{
			Runtime.Validate (typeof(ScrollView));
			ScrollView_RegisterObject ((object)context == null ? IntPtr.Zero : context.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_Update (IntPtr handle, float timeStep);

		/// <summary>
		/// Perform UI element update.
		/// </summary>
		public override void Update (float timeStep)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_Update (handle, timeStep);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_ApplyAttributes (IntPtr handle);

		/// <summary>
		/// Apply attribute changes that can not be applied immediately.
		/// </summary>
		public override void ApplyAttributes ()
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_ApplyAttributes (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_OnResize (IntPtr handle, ref Urho.IntVector2 newSize, ref Urho.IntVector2 delta);

		/// <summary>
		/// React to resize.
		/// </summary>
		public override void OnResize (Urho.IntVector2 newSize, Urho.IntVector2 delta)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_OnResize (handle, ref newSize, ref delta);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ScrollView_IsWheelHandler (IntPtr handle);

		/// <summary>
		/// Return whether the element could handle wheel input.
		/// </summary>
		private bool IsWheelHandler ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_IsWheelHandler (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetContentElement (IntPtr handle, IntPtr element);

		/// <summary>
		/// Set content element.
		/// 
		/// </summary>
		private void SetContentElement (UIElement element)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetContentElement (handle, (object)element == null ? IntPtr.Zero : element.Handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetViewPosition (IntPtr handle, ref Urho.IntVector2 position);

		/// <summary>
		/// Set view offset from the top-left corner.
		/// 
		/// </summary>
		private void SetViewPosition (Urho.IntVector2 position)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetViewPosition (handle, ref position);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetViewPosition0 (IntPtr handle, int x, int y);

		/// <summary>
		/// Set view offset from the top-left corner.
		/// </summary>
		public void SetViewPosition (int x, int y)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetViewPosition0 (handle, x, y);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetScrollBarsVisible (IntPtr handle, bool horizontal, bool vertical);

		/// <summary>
		/// Set scrollbars' visibility manually. Disables scrollbar autoshow/hide.
		/// </summary>
		public void SetScrollBarsVisible (bool horizontal, bool vertical)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetScrollBarsVisible (handle, horizontal, vertical);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetHorizontalScrollBarVisible (IntPtr handle, bool visible);

		/// <summary>
		/// Set horizontal scrollbar visibility manually. Disables scrollbar autoshow/hide.
		/// 
		/// </summary>
		private void SetHorizontalScrollBarVisible (bool visible)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetHorizontalScrollBarVisible (handle, visible);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetVerticalScrollBarVisible (IntPtr handle, bool visible);

		/// <summary>
		/// Set vertical scrollbar visibility manually. Disables scrollbar autoshow/hide.
		/// 
		/// </summary>
		private void SetVerticalScrollBarVisible (bool visible)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetVerticalScrollBarVisible (handle, visible);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetScrollBarsAutoVisible (IntPtr handle, bool enable);

		/// <summary>
		/// Set whether to automatically show/hide scrollbars. Default true.
		/// 
		/// </summary>
		private void SetScrollBarsAutoVisible (bool enable)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetScrollBarsAutoVisible (handle, enable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetScrollStep (IntPtr handle, float step);

		/// <summary>
		/// Set arrow key scroll step. Also sets it on the scrollbars.
		/// 
		/// </summary>
		private void SetScrollStep (float step)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetScrollStep (handle, step);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetPageStep (IntPtr handle, float step);

		/// <summary>
		/// Set arrow key page step.
		/// 
		/// </summary>
		private void SetPageStep (float step)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetPageStep (handle, step);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetScrollDeceleration (IntPtr handle, float deceleration);

		/// <summary>
		/// Set scroll deceleration.
		/// 
		/// </summary>
		private void SetScrollDeceleration (float deceleration)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetScrollDeceleration (handle, deceleration);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetScrollSnapEpsilon (IntPtr handle, float snap);

		/// <summary>
		/// Set scroll snap epsilon.
		/// 
		/// </summary>
		private void SetScrollSnapEpsilon (float snap)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetScrollSnapEpsilon (handle, snap);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetAutoDisableChildren (IntPtr handle, bool disable);

		/// <summary>
		/// Set whether child elements should be disabled while touch scrolling.
		/// 
		/// </summary>
		private void SetAutoDisableChildren (bool disable)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetAutoDisableChildren (handle, disable);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetAutoDisableThreshold (IntPtr handle, float amount);

		/// <summary>
		/// Set how much touch movement is needed to trigger child element disabling.
		/// 
		/// </summary>
		private void SetAutoDisableThreshold (float amount)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetAutoDisableThreshold (handle, amount);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern 
#if __WEB__
Urho.IntVector2 *
#else
Urho.IntVector2
#endif
 ScrollView_GetViewPosition (IntPtr handle);

		/// <summary>
		/// Return view offset from the top-left corner.
		/// 
		/// </summary>
		private Urho.IntVector2 GetViewPosition ()
		{
			Runtime.ValidateRefCounted (this);
			return 
#if __WEB__
*ScrollView_GetViewPosition
#else
ScrollView_GetViewPosition
#endif
 (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetContentElement (IntPtr handle);

		/// <summary>
		/// Return content element.
		/// 
		/// </summary>
		private UIElement GetContentElement ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<UIElement> (ScrollView_GetContentElement (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetHorizontalScrollBar (IntPtr handle);

		/// <summary>
		/// Return horizontal scroll bar.
		/// 
		/// </summary>
		private ScrollBar GetHorizontalScrollBar ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<ScrollBar> (ScrollView_GetHorizontalScrollBar (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetVerticalScrollBar (IntPtr handle);

		/// <summary>
		/// Return vertical scroll bar.
		/// 
		/// </summary>
		private ScrollBar GetVerticalScrollBar ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<ScrollBar> (ScrollView_GetVerticalScrollBar (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr ScrollView_GetScrollPanel (IntPtr handle);

		/// <summary>
		/// Return scroll panel.
		/// 
		/// </summary>
		private BorderImage GetScrollPanel ()
		{
			Runtime.ValidateRefCounted (this);
			return Runtime.LookupObject<BorderImage> (ScrollView_GetScrollPanel (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ScrollView_GetScrollBarsAutoVisible (IntPtr handle);

		/// <summary>
		/// Return whether scrollbars are automatically shown/hidden.
		/// 
		/// </summary>
		private bool GetScrollBarsAutoVisible ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetScrollBarsAutoVisible (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ScrollView_GetHorizontalScrollBarVisible (IntPtr handle);

		/// <summary>
		/// Return whether the horizontal scrollbar is visible.
		/// 
		/// </summary>
		private bool GetHorizontalScrollBarVisible ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetHorizontalScrollBarVisible (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ScrollView_GetVerticalScrollBarVisible (IntPtr handle);

		/// <summary>
		/// Return whether the vertical scrollbar is visible.
		/// 
		/// </summary>
		private bool GetVerticalScrollBarVisible ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetVerticalScrollBarVisible (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ScrollView_GetScrollStep (IntPtr handle);

		/// <summary>
		/// Return arrow key scroll step.
		/// 
		/// </summary>
		private float GetScrollStep ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetScrollStep (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ScrollView_GetPageStep (IntPtr handle);

		/// <summary>
		/// Return arrow key page step.
		/// 
		/// </summary>
		private float GetPageStep ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetPageStep (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ScrollView_GetScrollDeceleration (IntPtr handle);

		/// <summary>
		/// Return scroll deceleration.
		/// 
		/// </summary>
		private float GetScrollDeceleration ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetScrollDeceleration (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ScrollView_GetScrollSnapEpsilon (IntPtr handle);

		/// <summary>
		/// Return scroll snap epsilon.
		/// 
		/// </summary>
		private float GetScrollSnapEpsilon ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetScrollSnapEpsilon (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern bool ScrollView_GetAutoDisableChildren (IntPtr handle);

		/// <summary>
		/// Return whether child element will be disabled while touch scrolling.
		/// 
		/// </summary>
		private bool GetAutoDisableChildren ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetAutoDisableChildren (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern float ScrollView_GetAutoDisableThreshold (IntPtr handle);

		/// <summary>
		/// Return how much touch movement is needed to trigger child element disabling.
		/// 
		/// </summary>
		private float GetAutoDisableThreshold ()
		{
			Runtime.ValidateRefCounted (this);
			return ScrollView_GetAutoDisableThreshold (handle);
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void ScrollView_SetViewPositionAttr (IntPtr handle, ref Urho.IntVector2 value);

		/// <summary>
		/// Set view position attribute.
		/// </summary>
		public void SetViewPositionAttr (Urho.IntVector2 value)
		{
			Runtime.ValidateRefCounted (this);
			ScrollView_SetViewPositionAttr (handle, ref value);
		}

		public override StringHash Type {
			get {
				return UrhoGetType ();
			}
		}

		public override string TypeName {
			get {
				return GetTypeName ();
			}
		}

		[Preserve]
		public new static StringHash TypeStatic {
			get {
				return GetTypeStatic ();
			}
		}

		public new static string TypeNameStatic {
			get {
				return GetTypeNameStatic ();
			}
		}

		/// <summary>
		/// Return whether the element could handle wheel input.
		/// </summary>
		public override bool WheelHandler {
			get {
				return IsWheelHandler ();
			}
		}

		/// <summary>
		/// Return content element.
		/// 
		/// Or
		/// Set content element.
		/// 
		/// </summary>
		public UIElement ContentElement {
			get {
				return GetContentElement ();
			}
			set {
				SetContentElement (value);
			}
		}

		/// <summary>
		/// Return view offset from the top-left corner.
		/// 
		/// Or
		/// Set view offset from the top-left corner.
		/// 
		/// </summary>
		public Urho.IntVector2 ViewPosition {
			get {
				return GetViewPosition ();
			}
			set {
				SetViewPosition (value);
			}
		}

		/// <summary>
		/// Return whether the horizontal scrollbar is visible.
		/// 
		/// Or
		/// Set horizontal scrollbar visibility manually. Disables scrollbar autoshow/hide.
		/// 
		/// </summary>
		public bool HorizontalScrollBarVisible {
			get {
				return GetHorizontalScrollBarVisible ();
			}
			set {
				SetHorizontalScrollBarVisible (value);
			}
		}

		/// <summary>
		/// Return whether the vertical scrollbar is visible.
		/// 
		/// Or
		/// Set vertical scrollbar visibility manually. Disables scrollbar autoshow/hide.
		/// 
		/// </summary>
		public bool VerticalScrollBarVisible {
			get {
				return GetVerticalScrollBarVisible ();
			}
			set {
				SetVerticalScrollBarVisible (value);
			}
		}

		/// <summary>
		/// Return whether scrollbars are automatically shown/hidden.
		/// 
		/// Or
		/// Set whether to automatically show/hide scrollbars. Default true.
		/// 
		/// </summary>
		public bool ScrollBarsAutoVisible {
			get {
				return GetScrollBarsAutoVisible ();
			}
			set {
				SetScrollBarsAutoVisible (value);
			}
		}

		/// <summary>
		/// Return arrow key scroll step.
		/// 
		/// Or
		/// Set arrow key scroll step. Also sets it on the scrollbars.
		/// 
		/// </summary>
		public float ScrollStep {
			get {
				return GetScrollStep ();
			}
			set {
				SetScrollStep (value);
			}
		}

		/// <summary>
		/// Return arrow key page step.
		/// 
		/// Or
		/// Set arrow key page step.
		/// 
		/// </summary>
		public float PageStep {
			get {
				return GetPageStep ();
			}
			set {
				SetPageStep (value);
			}
		}

		/// <summary>
		/// Return scroll deceleration.
		/// 
		/// Or
		/// Set scroll deceleration.
		/// 
		/// </summary>
		public float ScrollDeceleration {
			get {
				return GetScrollDeceleration ();
			}
			set {
				SetScrollDeceleration (value);
			}
		}

		/// <summary>
		/// Return scroll snap epsilon.
		/// 
		/// Or
		/// Set scroll snap epsilon.
		/// 
		/// </summary>
		public float ScrollSnapEpsilon {
			get {
				return GetScrollSnapEpsilon ();
			}
			set {
				SetScrollSnapEpsilon (value);
			}
		}

		/// <summary>
		/// Return whether child element will be disabled while touch scrolling.
		/// 
		/// Or
		/// Set whether child elements should be disabled while touch scrolling.
		/// 
		/// </summary>
		public bool AutoDisableChildren {
			get {
				return GetAutoDisableChildren ();
			}
			set {
				SetAutoDisableChildren (value);
			}
		}

		/// <summary>
		/// Return how much touch movement is needed to trigger child element disabling.
		/// 
		/// Or
		/// Set how much touch movement is needed to trigger child element disabling.
		/// 
		/// </summary>
		public float AutoDisableThreshold {
			get {
				return GetAutoDisableThreshold ();
			}
			set {
				SetAutoDisableThreshold (value);
			}
		}

		/// <summary>
		/// Return horizontal scroll bar.
		/// 
		/// </summary>
		public ScrollBar HorizontalScrollBar {
			get {
				return GetHorizontalScrollBar ();
			}
		}

		/// <summary>
		/// Return vertical scroll bar.
		/// 
		/// </summary>
		public ScrollBar VerticalScrollBar {
			get {
				return GetVerticalScrollBar ();
			}
		}

		/// <summary>
		/// Return scroll panel.
		/// 
		/// </summary>
		public BorderImage ScrollPanel {
			get {
				return GetScrollPanel ();
			}
		}
	}
}
