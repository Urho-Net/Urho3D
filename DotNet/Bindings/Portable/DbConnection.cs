// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// DbConnection.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho
{

    public class DbResult
    {
        public List<string> Columns = new List<string>();

        public List<object[]> Rows = new List<object[]>();

        public int NumAffectedRows;

        public SQLResult Result;

        public DbResult()
        {
            Columns.Clear();
            Rows.Clear();
            NumAffectedRows = 0;
            Result = SQLResult.OK;
        }
    }

	/// <summary>
	/// %Database connection.
	/// </summary>
	public partial class DbConnection 
	{

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr DbConnection_GetSQLite3Implementation (IntPtr handle);

		public IntPtr SQLiteImplPtr()
		{
			Runtime.ValidateRefCounted (this);
			return DbConnection_GetSQLite3Implementation(handle);
		}
		
		public SQLite GetSQLiteImplementation()
		{
			Runtime.ValidateRefCounted (this);
			return new SQLite(DbConnection_GetSQLite3Implementation(handle),this);
		}
		
		public DbResult Execute(string sqlQuery)
        {
			
			Runtime.ValidateRefCounted (this);

            DbResult result = new DbResult();

            var sqlInstance = new SQLite(DbConnection_GetSQLite3Implementation(handle),this);

            var statement = sqlInstance.Prepare(sqlQuery);
            if(statement != null)
            {
                int columnCount = statement.ColumnCount;
                for(int i = 0 ; i <  columnCount ; i++)
                {
                    result.Columns.Add(statement.ColumnName(i));
                }

                while(true)
                {
                    SQLResult rc = statement.Step();

                    if (rc == SQLResult.Row)
                    {
                        object []colValues = new object[columnCount];

                        for (int i = 0; i < columnCount; i++)
                        {
                            var type = statement.ColumnType(i);

                            if(type != SQLType.Null)
                            {
                                switch(type)
                                {
                                    case SQLType.Integer:
                                       colValues[i] = statement.ColumnInt(i);
                                    break;

                                    case SQLType.Double:
                                        colValues[i] = statement.ColumnDouble(i) ;
                                    break;

                                    case SQLType.Text:
                                        colValues[i] = statement.ColumnText(i);
                                    break;
                                }
                            }
                        }

                        result.Rows.Add(colValues);
                    }
                    else if (rc != SQLResult.Done)
                    {
                        result.Result = rc;
                    }

                    if (rc != SQLResult.Row)
                    {
                        statement.Finalize();
                        break;
                    }
                }

               result.NumAffectedRows = (columnCount > 0  )? -1 : sqlInstance.Changes();
            }
            else
            {
                result.Result = SQLResult.Error;
            }

            return result;
        }
	}
}
